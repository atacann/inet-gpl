/* A Bison parser, made by GNU Bison 3.7.6.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30706

/* Bison version string.  */
#define YYBISON_VERSION "3.7.6"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* First part of user prologue.  */
#line 1 "parser.y"

/*
 * Copyright 2013 Google Inc.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */
/*
 * Author: Author: ncardwell@google.com (Neal Cardwell)
 *
 * This is the parser for the packetdrill script language. It is
 * processed by the bison parser generator.
 *
 * For full documentation see: http://www.gnu.org/software/bison/manual/
 *
 * Here is a quick and dirty tutorial on bison:
 *
 * A bison parser specification is basically a BNF grammar for the
 * language you are parsing. Each rule specifies a nonterminal symbol
 * on the left-hand side and a sequence of terminal symbols (lexical
 * tokens) and or nonterminal symbols on the right-hand side that can
 * "reduce" to the symbol on the left hand side. When the parser sees
 * the sequence of symbols on the right where it "wants" to see a
 * nonterminal on the left, the rule fires, executing the semantic
 * action code in curly {} braces as it reduces the right hand side to
 * the left hand side.
 *
 * The semantic action code for a rule produces an output, which it
 * can reference using the $$ token. The set of possible types
 * returned in output expressions is given in the %union section of
 * the .y file. The specific type of the output for a terminal or
 * nonterminal symbol (corresponding to a field in the %union) is
 * given by the %type directive in the .y file. The action code can
 * access the outputs of the symbols on the right hand side by using
 * the notation $1 for the first symbol, $2 for the second symbol, and
 * so on.
 *
 * The lexer (generated by flex from lexer.l) feeds a stream of
 * terminal symbols up to this parser. Parser semantic actions can
 * access the lexer output for a terminal symbol with the same
 * notation they use for nonterminals.
 *
 */

/* The first part of the .y file consists of C code that bison copies
 * directly into the top of the .c file it generates.
 */

#include "inetgpl/common/INETGPLDefs.h"

#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32) && !defined(__CYGWIN__) && !defined(_WIN64)
#include <arpa/inet.h>
#include <netinet/in.h>
#else
#include "winsock2.h"
#endif
#include <stdio.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

using namespace inetgpl;
using namespace inet;
namespace inet { namespace sctp { }}
using namespace inet::sctp;

#include "PacketDrillUtils.h"
#include "PacketDrill.h"

/* This include of the bison-generated .h file must go last so that we
 * can first include all of the declarations on which it depends.
 */
#include "parser.h"

/* Change this YYDEBUG to 1 to get verbose debug output for parsing: */
#define YYDEBUG 0
#if YYDEBUG
extern int yydebug;
#endif

extern FILE *yyin;
extern int yylineno;
extern int yywrap(void);
extern char *yytext;
extern int yylex(void);
extern int yyparse(void);

/* The input to the parser: the path name of the script file to parse. */
static const char* current_script_path = NULL;

/* The starting line number of the input script statement that we're
 * currently parsing. This may be different than yylineno if bison had
 * to look ahead and lexically scan a token on the following line to
 * decide that the current statement is done.
 */
static int current_script_line = -1;

/*
 * We use this object to look up configuration info needed during
 * parsing.
 */
static PacketDrillConfig *in_config = NULL;

/* The output of the parser: an output script containing
 * 1) a linked list of options
 * 2) a linked list of events
 */
static PacketDrillScript *out_script = NULL;


/* The test invocation to pass back to parse_and_finalize_config(). */
Invocation *invocation;

/* This standard callback is invoked by flex when it encounters
 * the end of a file. We return 1 to tell flex to return EOF.
 */
int yywrap(void)
{
    return 1;
}


/* The public entry point for the script parser. Parses the
 * text script file with the given path name and fills in the script
 * object with the parsed representation.
 */
int parse_script(PacketDrillConfig *config, PacketDrillScript *script, Invocation *callback_invocation){
    /* This bison-generated parser is not multi-thread safe, so we
     * have a lock to prevent more than one thread using the
     * parser at the same time. This is useful in the wire server
     * context, where in general we may have more than one test
     * thread running at the same time.
     */

#if YYDEBUG
    yydebug = 1;
#endif

    /* Now parse the script from our buffer. */
    yyin = fopen(script->getScriptPath(), "r");
    if (!yyin)
        printf("fopen: parse error opening script buffer");
    current_script_path = config->getScriptPath();
    in_config = config;
    out_script = script;
    invocation = callback_invocation;

    /* We have to reset the line number here since the wire server
     * can do more than one yyparse().
     */
    yylineno = 1;
    int result = yyparse(); /* invoke bison-generated parser */
    current_script_path = NULL;
    if (fclose(yyin))
        printf("fclose: error closing script buffer");

    /* Unlock parser. */

    return result ? -1 : 0;
}

void parse_and_finalize_config(Invocation *invocation)
{
    invocation->config->parseScriptOptions(invocation->script->getOptionList());
}

/* Bison emits code to call this method when there's a parse-time error.
 * We print the line number and the error message.
 */
static void yyerror(const char *message) {
    fprintf(stderr, "%s:%d: parse error at '%s': %s\n",
        current_script_path, yylineno, yytext, message);
}

static void semantic_error(const char* message)
{
    printf("%s\n", message);
    throw cTerminationException("Packetdrill error: Script error");
}

/* Create and initalize a new integer expression with the given
 * literal value and format string.
 */
static PacketDrillExpression *new_integer_expression(int64_t num, const char *format) {
    PacketDrillExpression *expression = new PacketDrillExpression(EXPR_INTEGER);
    expression->setNum(num);
    expression->setFormat(format);
    return expression;
}


/* Create and initialize a new option. */
/*static struct option_list *new_option(char *name, char *value)
{
    return NULL;
}*/


#line 276 "parser.cc"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "parser.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_ELLIPSIS = 3,                   /* ELLIPSIS  */
  YYSYMBOL_UDP = 4,                        /* UDP  */
  YYSYMBOL__HTONS_ = 5,                    /* _HTONS_  */
  YYSYMBOL__HTONL_ = 6,                    /* _HTONL_  */
  YYSYMBOL_BACK_QUOTED = 7,                /* BACK_QUOTED  */
  YYSYMBOL_SA_FAMILY = 8,                  /* SA_FAMILY  */
  YYSYMBOL_SIN_PORT = 9,                   /* SIN_PORT  */
  YYSYMBOL_SIN_ADDR = 10,                  /* SIN_ADDR  */
  YYSYMBOL_ACK = 11,                       /* ACK  */
  YYSYMBOL_WIN = 12,                       /* WIN  */
  YYSYMBOL_WSCALE = 13,                    /* WSCALE  */
  YYSYMBOL_MSS = 14,                       /* MSS  */
  YYSYMBOL_NOP = 15,                       /* NOP  */
  YYSYMBOL_TIMESTAMP = 16,                 /* TIMESTAMP  */
  YYSYMBOL_ECR = 17,                       /* ECR  */
  YYSYMBOL_EOL = 18,                       /* EOL  */
  YYSYMBOL_TCPSACK = 19,                   /* TCPSACK  */
  YYSYMBOL_VAL = 20,                       /* VAL  */
  YYSYMBOL_SACKOK = 21,                    /* SACKOK  */
  YYSYMBOL_OPTION = 22,                    /* OPTION  */
  YYSYMBOL_IPV4_TYPE = 23,                 /* IPV4_TYPE  */
  YYSYMBOL_IPV6_TYPE = 24,                 /* IPV6_TYPE  */
  YYSYMBOL_INET_ADDR = 25,                 /* INET_ADDR  */
  YYSYMBOL_SPP_ASSOC_ID = 26,              /* SPP_ASSOC_ID  */
  YYSYMBOL_SPP_ADDRESS = 27,               /* SPP_ADDRESS  */
  YYSYMBOL_SPP_HBINTERVAL = 28,            /* SPP_HBINTERVAL  */
  YYSYMBOL_SPP_PATHMAXRXT = 29,            /* SPP_PATHMAXRXT  */
  YYSYMBOL_SPP_PATHMTU = 30,               /* SPP_PATHMTU  */
  YYSYMBOL_SPP_FLAGS = 31,                 /* SPP_FLAGS  */
  YYSYMBOL_SPP_IPV6_FLOWLABEL_ = 32,       /* SPP_IPV6_FLOWLABEL_  */
  YYSYMBOL_SPP_DSCP_ = 33,                 /* SPP_DSCP_  */
  YYSYMBOL_SINFO_STREAM = 34,              /* SINFO_STREAM  */
  YYSYMBOL_SINFO_SSN = 35,                 /* SINFO_SSN  */
  YYSYMBOL_SINFO_FLAGS = 36,               /* SINFO_FLAGS  */
  YYSYMBOL_SINFO_PPID = 37,                /* SINFO_PPID  */
  YYSYMBOL_SINFO_CONTEXT = 38,             /* SINFO_CONTEXT  */
  YYSYMBOL_SINFO_ASSOC_ID = 39,            /* SINFO_ASSOC_ID  */
  YYSYMBOL_SINFO_TIMETOLIVE = 40,          /* SINFO_TIMETOLIVE  */
  YYSYMBOL_SINFO_TSN = 41,                 /* SINFO_TSN  */
  YYSYMBOL_SINFO_CUMTSN = 42,              /* SINFO_CUMTSN  */
  YYSYMBOL_SINFO_PR_VALUE = 43,            /* SINFO_PR_VALUE  */
  YYSYMBOL_CHUNK = 44,                     /* CHUNK  */
  YYSYMBOL_MYDATA = 45,                    /* MYDATA  */
  YYSYMBOL_MYINIT = 46,                    /* MYINIT  */
  YYSYMBOL_MYINIT_ACK = 47,                /* MYINIT_ACK  */
  YYSYMBOL_MYHEARTBEAT = 48,               /* MYHEARTBEAT  */
  YYSYMBOL_MYHEARTBEAT_ACK = 49,           /* MYHEARTBEAT_ACK  */
  YYSYMBOL_MYABORT = 50,                   /* MYABORT  */
  YYSYMBOL_MYSHUTDOWN = 51,                /* MYSHUTDOWN  */
  YYSYMBOL_MYSHUTDOWN_ACK = 52,            /* MYSHUTDOWN_ACK  */
  YYSYMBOL_MYERROR = 53,                   /* MYERROR  */
  YYSYMBOL_MYCOOKIE_ECHO = 54,             /* MYCOOKIE_ECHO  */
  YYSYMBOL_MYCOOKIE_ACK = 55,              /* MYCOOKIE_ACK  */
  YYSYMBOL_MYSHUTDOWN_COMPLETE = 56,       /* MYSHUTDOWN_COMPLETE  */
  YYSYMBOL_PAD = 57,                       /* PAD  */
  YYSYMBOL_ERROR = 58,                     /* ERROR  */
  YYSYMBOL_HEARTBEAT_INFORMATION = 59,     /* HEARTBEAT_INFORMATION  */
  YYSYMBOL_CAUSE_INFO = 60,                /* CAUSE_INFO  */
  YYSYMBOL_MYSACK = 61,                    /* MYSACK  */
  YYSYMBOL_STATE_COOKIE = 62,              /* STATE_COOKIE  */
  YYSYMBOL_PARAMETER = 63,                 /* PARAMETER  */
  YYSYMBOL_MYSCTP = 64,                    /* MYSCTP  */
  YYSYMBOL_TYPE = 65,                      /* TYPE  */
  YYSYMBOL_FLAGS = 66,                     /* FLAGS  */
  YYSYMBOL_LEN = 67,                       /* LEN  */
  YYSYMBOL_MYSUPPORTED_EXTENSIONS = 68,    /* MYSUPPORTED_EXTENSIONS  */
  YYSYMBOL_MYSUPPORTED_ADDRESS_TYPES = 69, /* MYSUPPORTED_ADDRESS_TYPES  */
  YYSYMBOL_TYPES = 70,                     /* TYPES  */
  YYSYMBOL_CWR = 71,                       /* CWR  */
  YYSYMBOL_ECNE = 72,                      /* ECNE  */
  YYSYMBOL_TAG = 73,                       /* TAG  */
  YYSYMBOL_A_RWND = 74,                    /* A_RWND  */
  YYSYMBOL_OS = 75,                        /* OS  */
  YYSYMBOL_IS = 76,                        /* IS  */
  YYSYMBOL_TSN = 77,                       /* TSN  */
  YYSYMBOL_MYSID = 78,                     /* MYSID  */
  YYSYMBOL_SSN = 79,                       /* SSN  */
  YYSYMBOL_PPID = 80,                      /* PPID  */
  YYSYMBOL_CUM_TSN = 81,                   /* CUM_TSN  */
  YYSYMBOL_GAPS = 82,                      /* GAPS  */
  YYSYMBOL_DUPS = 83,                      /* DUPS  */
  YYSYMBOL_MID = 84,                       /* MID  */
  YYSYMBOL_FSN = 85,                       /* FSN  */
  YYSYMBOL_SRTO_ASSOC_ID = 86,             /* SRTO_ASSOC_ID  */
  YYSYMBOL_SRTO_INITIAL = 87,              /* SRTO_INITIAL  */
  YYSYMBOL_SRTO_MAX = 88,                  /* SRTO_MAX  */
  YYSYMBOL_SRTO_MIN = 89,                  /* SRTO_MIN  */
  YYSYMBOL_SINIT_NUM_OSTREAMS = 90,        /* SINIT_NUM_OSTREAMS  */
  YYSYMBOL_SINIT_MAX_INSTREAMS = 91,       /* SINIT_MAX_INSTREAMS  */
  YYSYMBOL_SINIT_MAX_ATTEMPTS = 92,        /* SINIT_MAX_ATTEMPTS  */
  YYSYMBOL_SINIT_MAX_INIT_TIMEO = 93,      /* SINIT_MAX_INIT_TIMEO  */
  YYSYMBOL_MYSACK_DELAY = 94,              /* MYSACK_DELAY  */
  YYSYMBOL_SACK_FREQ = 95,                 /* SACK_FREQ  */
  YYSYMBOL_ASSOC_VALUE = 96,               /* ASSOC_VALUE  */
  YYSYMBOL_ASSOC_ID = 97,                  /* ASSOC_ID  */
  YYSYMBOL_SACK_ASSOC_ID = 98,             /* SACK_ASSOC_ID  */
  YYSYMBOL_RECONFIG = 99,                  /* RECONFIG  */
  YYSYMBOL_OUTGOING_SSN_RESET = 100,       /* OUTGOING_SSN_RESET  */
  YYSYMBOL_REQ_SN = 101,                   /* REQ_SN  */
  YYSYMBOL_RESP_SN = 102,                  /* RESP_SN  */
  YYSYMBOL_LAST_TSN = 103,                 /* LAST_TSN  */
  YYSYMBOL_SIDS = 104,                     /* SIDS  */
  YYSYMBOL_INCOMING_SSN_RESET = 105,       /* INCOMING_SSN_RESET  */
  YYSYMBOL_RECONFIG_RESPONSE = 106,        /* RECONFIG_RESPONSE  */
  YYSYMBOL_RESULT = 107,                   /* RESULT  */
  YYSYMBOL_SENDER_NEXT_TSN = 108,          /* SENDER_NEXT_TSN  */
  YYSYMBOL_RECEIVER_NEXT_TSN = 109,        /* RECEIVER_NEXT_TSN  */
  YYSYMBOL_SSN_TSN_RESET = 110,            /* SSN_TSN_RESET  */
  YYSYMBOL_ADD_INCOMING_STREAMS = 111,     /* ADD_INCOMING_STREAMS  */
  YYSYMBOL_NUMBER_OF_NEW_STREAMS = 112,    /* NUMBER_OF_NEW_STREAMS  */
  YYSYMBOL_ADD_OUTGOING_STREAMS = 113,     /* ADD_OUTGOING_STREAMS  */
  YYSYMBOL_RECONFIG_REQUEST_GENERIC = 114, /* RECONFIG_REQUEST_GENERIC  */
  YYSYMBOL_SRS_ASSOC_ID = 115,             /* SRS_ASSOC_ID  */
  YYSYMBOL_SRS_FLAGS = 116,                /* SRS_FLAGS  */
  YYSYMBOL_SRS_NUMBER_STREAMS = 117,       /* SRS_NUMBER_STREAMS  */
  YYSYMBOL_SRS_STREAM_LIST = 118,          /* SRS_STREAM_LIST  */
  YYSYMBOL_SSTAT_ASSOC_ID = 119,           /* SSTAT_ASSOC_ID  */
  YYSYMBOL_SSTAT_STATE = 120,              /* SSTAT_STATE  */
  YYSYMBOL_SSTAT_RWND = 121,               /* SSTAT_RWND  */
  YYSYMBOL_SSTAT_UNACKDATA = 122,          /* SSTAT_UNACKDATA  */
  YYSYMBOL_SSTAT_PENDDATA = 123,           /* SSTAT_PENDDATA  */
  YYSYMBOL_SSTAT_INSTRMS = 124,            /* SSTAT_INSTRMS  */
  YYSYMBOL_SSTAT_OUTSTRMS = 125,           /* SSTAT_OUTSTRMS  */
  YYSYMBOL_SSTAT_FRAGMENTATION_POINT = 126, /* SSTAT_FRAGMENTATION_POINT  */
  YYSYMBOL_SSTAT_PRIMARY = 127,            /* SSTAT_PRIMARY  */
  YYSYMBOL_SASOC_ASOCMAXRXT = 128,         /* SASOC_ASOCMAXRXT  */
  YYSYMBOL_SASOC_ASSOC_ID = 129,           /* SASOC_ASSOC_ID  */
  YYSYMBOL_SASOC_NUMBER_PEER_DESTINATIONS = 130, /* SASOC_NUMBER_PEER_DESTINATIONS  */
  YYSYMBOL_SASOC_PEER_RWND = 131,          /* SASOC_PEER_RWND  */
  YYSYMBOL_SASOC_LOCAL_RWND = 132,         /* SASOC_LOCAL_RWND  */
  YYSYMBOL_SASOC_COOKIE_LIFE = 133,        /* SASOC_COOKIE_LIFE  */
  YYSYMBOL_SAS_ASSOC_ID = 134,             /* SAS_ASSOC_ID  */
  YYSYMBOL_SAS_INSTRMS = 135,              /* SAS_INSTRMS  */
  YYSYMBOL_SAS_OUTSTRMS = 136,             /* SAS_OUTSTRMS  */
  YYSYMBOL_MYINVALID_STREAM_IDENTIFIER = 137, /* MYINVALID_STREAM_IDENTIFIER  */
  YYSYMBOL_ISID = 138,                     /* ISID  */
  YYSYMBOL_MYFLOAT = 139,                  /* MYFLOAT  */
  YYSYMBOL_INTEGER = 140,                  /* INTEGER  */
  YYSYMBOL_HEX_INTEGER = 141,              /* HEX_INTEGER  */
  YYSYMBOL_MYWORD = 142,                   /* MYWORD  */
  YYSYMBOL_MYSTRING = 143,                 /* MYSTRING  */
  YYSYMBOL_144_ = 144,                     /* '='  */
  YYSYMBOL_145_ = 145,                     /* '+'  */
  YYSYMBOL_146_ = 146,                     /* '*'  */
  YYSYMBOL_147_ = 147,                     /* '~'  */
  YYSYMBOL_148_ = 148,                     /* '('  */
  YYSYMBOL_149_ = 149,                     /* ')'  */
  YYSYMBOL_150_ = 150,                     /* ':'  */
  YYSYMBOL_151_ = 151,                     /* ';'  */
  YYSYMBOL_152_ = 152,                     /* '['  */
  YYSYMBOL_153_ = 153,                     /* ']'  */
  YYSYMBOL_154_ = 154,                     /* ','  */
  YYSYMBOL_155_ = 155,                     /* '<'  */
  YYSYMBOL_156_ = 156,                     /* '>'  */
  YYSYMBOL_157_ = 157,                     /* '.'  */
  YYSYMBOL_158_ = 158,                     /* '-'  */
  YYSYMBOL_159_ = 159,                     /* '|'  */
  YYSYMBOL_160_ = 160,                     /* '{'  */
  YYSYMBOL_161_ = 161,                     /* '}'  */
  YYSYMBOL_YYACCEPT = 162,                 /* $accept  */
  YYSYMBOL_script = 163,                   /* script  */
  YYSYMBOL_opt_options = 164,              /* opt_options  */
  YYSYMBOL_options = 165,                  /* options  */
  YYSYMBOL_option = 166,                   /* option  */
  YYSYMBOL_option_flag = 167,              /* option_flag  */
  YYSYMBOL_option_value = 168,             /* option_value  */
  YYSYMBOL_events = 169,                   /* events  */
  YYSYMBOL_event = 170,                    /* event  */
  YYSYMBOL_event_time = 171,               /* event_time  */
  YYSYMBOL_time = 172,                     /* time  */
  YYSYMBOL_action = 173,                   /* action  */
  YYSYMBOL_command_spec = 174,             /* command_spec  */
  YYSYMBOL_packet_spec = 175,              /* packet_spec  */
  YYSYMBOL_tcp_packet_spec = 176,          /* tcp_packet_spec  */
  YYSYMBOL_udp_packet_spec = 177,          /* udp_packet_spec  */
  YYSYMBOL_sctp_packet_spec = 178,         /* sctp_packet_spec  */
  YYSYMBOL_sctp_chunk_list = 179,          /* sctp_chunk_list  */
  YYSYMBOL_sctp_chunk = 180,               /* sctp_chunk  */
  YYSYMBOL_opt_flags = 181,                /* opt_flags  */
  YYSYMBOL_opt_len = 182,                  /* opt_len  */
  YYSYMBOL_opt_val = 183,                  /* opt_val  */
  YYSYMBOL_byte_list = 184,                /* byte_list  */
  YYSYMBOL_chunk_types_list = 185,         /* chunk_types_list  */
  YYSYMBOL_byte = 186,                     /* byte  */
  YYSYMBOL_chunk_type = 187,               /* chunk_type  */
  YYSYMBOL_opt_data_flags = 188,           /* opt_data_flags  */
  YYSYMBOL_opt_abort_flags = 189,          /* opt_abort_flags  */
  YYSYMBOL_opt_shutdown_complete_flags = 190, /* opt_shutdown_complete_flags  */
  YYSYMBOL_opt_tag = 191,                  /* opt_tag  */
  YYSYMBOL_opt_a_rwnd = 192,               /* opt_a_rwnd  */
  YYSYMBOL_opt_os = 193,                   /* opt_os  */
  YYSYMBOL_opt_is = 194,                   /* opt_is  */
  YYSYMBOL_opt_tsn = 195,                  /* opt_tsn  */
  YYSYMBOL_opt_sid = 196,                  /* opt_sid  */
  YYSYMBOL_opt_ssn = 197,                  /* opt_ssn  */
  YYSYMBOL_opt_ppid = 198,                 /* opt_ppid  */
  YYSYMBOL_opt_cum_tsn = 199,              /* opt_cum_tsn  */
  YYSYMBOL_opt_gaps = 200,                 /* opt_gaps  */
  YYSYMBOL_opt_dups = 201,                 /* opt_dups  */
  YYSYMBOL_sctp_data_chunk_spec = 202,     /* sctp_data_chunk_spec  */
  YYSYMBOL_sctp_init_chunk_spec = 203,     /* sctp_init_chunk_spec  */
  YYSYMBOL_sctp_init_ack_chunk_spec = 204, /* sctp_init_ack_chunk_spec  */
  YYSYMBOL_sctp_sack_chunk_spec = 205,     /* sctp_sack_chunk_spec  */
  YYSYMBOL_sctp_heartbeat_chunk_spec = 206, /* sctp_heartbeat_chunk_spec  */
  YYSYMBOL_sctp_heartbeat_ack_chunk_spec = 207, /* sctp_heartbeat_ack_chunk_spec  */
  YYSYMBOL_sctp_abort_chunk_spec = 208,    /* sctp_abort_chunk_spec  */
  YYSYMBOL_sctp_shutdown_chunk_spec = 209, /* sctp_shutdown_chunk_spec  */
  YYSYMBOL_sctp_shutdown_ack_chunk_spec = 210, /* sctp_shutdown_ack_chunk_spec  */
  YYSYMBOL_sctp_cookie_echo_chunk_spec = 211, /* sctp_cookie_echo_chunk_spec  */
  YYSYMBOL_sctp_cookie_ack_chunk_spec = 212, /* sctp_cookie_ack_chunk_spec  */
  YYSYMBOL_opt_cause_list = 213,           /* opt_cause_list  */
  YYSYMBOL_sctp_cause_list = 214,          /* sctp_cause_list  */
  YYSYMBOL_sctp_invalid_stream_identifier_cause_spec = 215, /* sctp_invalid_stream_identifier_cause_spec  */
  YYSYMBOL_sctp_cause_spec = 216,          /* sctp_cause_spec  */
  YYSYMBOL_sctp_error_chunk_spec = 217,    /* sctp_error_chunk_spec  */
  YYSYMBOL_sctp_shutdown_complete_chunk_spec = 218, /* sctp_shutdown_complete_chunk_spec  */
  YYSYMBOL_opt_req_sn = 219,               /* opt_req_sn  */
  YYSYMBOL_opt_resp_sn = 220,              /* opt_resp_sn  */
  YYSYMBOL_opt_last_tsn = 221,             /* opt_last_tsn  */
  YYSYMBOL_opt_result = 222,               /* opt_result  */
  YYSYMBOL_opt_sender_next_tsn = 223,      /* opt_sender_next_tsn  */
  YYSYMBOL_opt_receiver_next_tsn = 224,    /* opt_receiver_next_tsn  */
  YYSYMBOL_opt_number_of_new_streams = 225, /* opt_number_of_new_streams  */
  YYSYMBOL_stream_list = 226,              /* stream_list  */
  YYSYMBOL_stream = 227,                   /* stream  */
  YYSYMBOL_outgoing_ssn_reset_request = 228, /* outgoing_ssn_reset_request  */
  YYSYMBOL_incoming_ssn_reset_request = 229, /* incoming_ssn_reset_request  */
  YYSYMBOL_ssn_tsn_reset_request = 230,    /* ssn_tsn_reset_request  */
  YYSYMBOL_reconfig_response = 231,        /* reconfig_response  */
  YYSYMBOL_add_outgoing_streams_request = 232, /* add_outgoing_streams_request  */
  YYSYMBOL_add_incoming_streams_request = 233, /* add_incoming_streams_request  */
  YYSYMBOL_sctp_reconfig_chunk_spec = 234, /* sctp_reconfig_chunk_spec  */
  YYSYMBOL_opt_parameter_list = 235,       /* opt_parameter_list  */
  YYSYMBOL_sctp_parameter_list = 236,      /* sctp_parameter_list  */
  YYSYMBOL_sctp_parameter = 237,           /* sctp_parameter  */
  YYSYMBOL_sctp_heartbeat_information_parameter = 238, /* sctp_heartbeat_information_parameter  */
  YYSYMBOL_sctp_supported_extensions_parameter = 239, /* sctp_supported_extensions_parameter  */
  YYSYMBOL_address_types_list = 240,       /* address_types_list  */
  YYSYMBOL_address_type = 241,             /* address_type  */
  YYSYMBOL_sctp_supported_address_types_parameter = 242, /* sctp_supported_address_types_parameter  */
  YYSYMBOL_sctp_state_cookie_parameter = 243, /* sctp_state_cookie_parameter  */
  YYSYMBOL_packet_prefix = 244,            /* packet_prefix  */
  YYSYMBOL_direction = 245,                /* direction  */
  YYSYMBOL_flags = 246,                    /* flags  */
  YYSYMBOL_seq = 247,                      /* seq  */
  YYSYMBOL_opt_ack = 248,                  /* opt_ack  */
  YYSYMBOL_opt_window = 249,               /* opt_window  */
  YYSYMBOL_opt_tcp_options = 250,          /* opt_tcp_options  */
  YYSYMBOL_tcp_option_list = 251,          /* tcp_option_list  */
  YYSYMBOL_tcp_option = 252,               /* tcp_option  */
  YYSYMBOL_sack_block_list = 253,          /* sack_block_list  */
  YYSYMBOL_gap_list = 254,                 /* gap_list  */
  YYSYMBOL_gap = 255,                      /* gap  */
  YYSYMBOL_dup_list = 256,                 /* dup_list  */
  YYSYMBOL_dup = 257,                      /* dup  */
  YYSYMBOL_sack_block = 258,               /* sack_block  */
  YYSYMBOL_syscall_spec = 259,             /* syscall_spec  */
  YYSYMBOL_opt_end_time = 260,             /* opt_end_time  */
  YYSYMBOL_function_name = 261,            /* function_name  */
  YYSYMBOL_function_arguments = 262,       /* function_arguments  */
  YYSYMBOL_expression_list = 263,          /* expression_list  */
  YYSYMBOL_expression = 264,               /* expression  */
  YYSYMBOL_decimal_integer = 265,          /* decimal_integer  */
  YYSYMBOL_hex_integer = 266,              /* hex_integer  */
  YYSYMBOL_binary_expression = 267,        /* binary_expression  */
  YYSYMBOL_array = 268,                    /* array  */
  YYSYMBOL_srto_initial = 269,             /* srto_initial  */
  YYSYMBOL_srto_max = 270,                 /* srto_max  */
  YYSYMBOL_srto_min = 271,                 /* srto_min  */
  YYSYMBOL_sctp_assoc_id = 272,            /* sctp_assoc_id  */
  YYSYMBOL_sctp_rtoinfo = 273,             /* sctp_rtoinfo  */
  YYSYMBOL_sasoc_asocmaxrxt = 274,         /* sasoc_asocmaxrxt  */
  YYSYMBOL_sasoc_number_peer_destinations = 275, /* sasoc_number_peer_destinations  */
  YYSYMBOL_sasoc_peer_rwnd = 276,          /* sasoc_peer_rwnd  */
  YYSYMBOL_sasoc_local_rwnd = 277,         /* sasoc_local_rwnd  */
  YYSYMBOL_sasoc_cookie_life = 278,        /* sasoc_cookie_life  */
  YYSYMBOL_sctp_assocparams = 279,         /* sctp_assocparams  */
  YYSYMBOL_sinit_num_ostreams = 280,       /* sinit_num_ostreams  */
  YYSYMBOL_sinit_max_instreams = 281,      /* sinit_max_instreams  */
  YYSYMBOL_sinit_max_attempts = 282,       /* sinit_max_attempts  */
  YYSYMBOL_sinit_max_init_timeo = 283,     /* sinit_max_init_timeo  */
  YYSYMBOL_sctp_initmsg = 284,             /* sctp_initmsg  */
  YYSYMBOL_sockaddr = 285,                 /* sockaddr  */
  YYSYMBOL_spp_address = 286,              /* spp_address  */
  YYSYMBOL_spp_hbinterval = 287,           /* spp_hbinterval  */
  YYSYMBOL_spp_pathmtu = 288,              /* spp_pathmtu  */
  YYSYMBOL_spp_pathmaxrxt = 289,           /* spp_pathmaxrxt  */
  YYSYMBOL_spp_flags = 290,                /* spp_flags  */
  YYSYMBOL_spp_ipv6_flowlabel = 291,       /* spp_ipv6_flowlabel  */
  YYSYMBOL_spp_dscp = 292,                 /* spp_dscp  */
  YYSYMBOL_sctp_paddrparams = 293,         /* sctp_paddrparams  */
  YYSYMBOL_sstat_state = 294,              /* sstat_state  */
  YYSYMBOL_sstat_rwnd = 295,               /* sstat_rwnd  */
  YYSYMBOL_sstat_unackdata = 296,          /* sstat_unackdata  */
  YYSYMBOL_sstat_penddata = 297,           /* sstat_penddata  */
  YYSYMBOL_sstat_instrms = 298,            /* sstat_instrms  */
  YYSYMBOL_sstat_outstrms = 299,           /* sstat_outstrms  */
  YYSYMBOL_sstat_fragmentation_point = 300, /* sstat_fragmentation_point  */
  YYSYMBOL_sstat_primary = 301,            /* sstat_primary  */
  YYSYMBOL_sctp_status = 302,              /* sctp_status  */
  YYSYMBOL_sinfo_stream = 303,             /* sinfo_stream  */
  YYSYMBOL_sinfo_ssn = 304,                /* sinfo_ssn  */
  YYSYMBOL_sinfo_flags = 305,              /* sinfo_flags  */
  YYSYMBOL_sinfo_ppid = 306,               /* sinfo_ppid  */
  YYSYMBOL_sinfo_context = 307,            /* sinfo_context  */
  YYSYMBOL_sinfo_timetolive = 308,         /* sinfo_timetolive  */
  YYSYMBOL_sinfo_tsn = 309,                /* sinfo_tsn  */
  YYSYMBOL_sinfo_cumtsn = 310,             /* sinfo_cumtsn  */
  YYSYMBOL_sctp_sndrcvinfo = 311,          /* sctp_sndrcvinfo  */
  YYSYMBOL_srs_flags = 312,                /* srs_flags  */
  YYSYMBOL_sctp_reset_streams = 313,       /* sctp_reset_streams  */
  YYSYMBOL_sctp_add_streams = 314,         /* sctp_add_streams  */
  YYSYMBOL_sctp_assoc_value = 315,         /* sctp_assoc_value  */
  YYSYMBOL_sack_delay = 316,               /* sack_delay  */
  YYSYMBOL_sack_freq = 317,                /* sack_freq  */
  YYSYMBOL_sctp_sackinfo = 318,            /* sctp_sackinfo  */
  YYSYMBOL_opt_errno = 319,                /* opt_errno  */
  YYSYMBOL_opt_note = 320,                 /* opt_note  */
  YYSYMBOL_note = 321,                     /* note  */
  YYSYMBOL_word_list = 322                 /* word_list  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1206

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  162
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  161
/* YYNRULES -- Number of rules.  */
#define YYNRULES  370
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  957

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   398


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     148,   149,   146,   145,   154,   158,   157,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   150,   151,
     155,   144,   156,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   152,     2,   153,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   160,   159,   161,   147,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   354,   354,   360,   362,   369,   373,   380,   385,   389,
     390,   391,   396,   400,   407,   437,   443,   449,   454,   461,
     471,   477,   486,   493,   497,   504,   511,   514,   517,   523,
     549,   568,   588,   590,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   614,   615,
     621,   630,   631,   640,   641,   642,   646,   647,   652,   653,
     654,   659,   665,   674,   680,   686,   689,   692,   695,   698,
     701,   704,   707,   710,   713,   716,   719,   722,   725,   728,
     734,   735,   741,   747,   791,   792,   798,   804,   827,   828,
     834,   840,   863,   864,   873,   874,   883,   884,   893,   894,
     903,   904,   913,   914,   923,   924,   934,   935,   941,   950,
     951,   960,   961,   962,   967,   968,   969,   974,   983,   988,
     993,   998,  1004,  1010,  1015,  1020,  1025,  1041,  1046,  1047,
    1048,  1052,  1054,  1059,  1065,  1070,  1074,  1079,  1085,  1091,
    1095,  1101,  1105,  1111,  1115,  1121,  1125,  1131,  1137,  1141,
    1147,  1153,  1157,  1163,  1167,  1171,  1177,  1180,  1190,  1193,
    1199,  1202,  1208,  1214,  1217,  1223,  1229,  1241,  1247,  1248,
    1249,  1253,  1257,  1265,  1266,  1267,  1268,  1269,  1270,  1271,
    1272,  1273,  1274,  1279,  1282,  1298,  1301,  1306,  1308,  1311,
    1317,  1321,  1322,  1326,  1329,  1335,  1338,  1341,  1351,  1359,
    1363,  1370,  1373,  1376,  1380,  1386,  1406,  1409,  1418,  1421,
    1430,  1433,  1436,  1443,  1447,  1455,  1458,  1461,  1468,  1475,
    1478,  1482,  1499,  1503,  1509,  1510,  1514,  1520,  1532,  1533,
    1537,  1543,  1555,  1568,  1580,  1583,  1589,  1596,  1599,  1605,
    1609,  1616,  1619,  1621,  1624,  1630,  1636,  1642,  1646,  1651,
    1656,  1659,  1662,  1665,  1668,  1671,  1674,  1677,  1680,  1683,
    1686,  1689,  1692,  1700,  1706,  1712,  1723,  1727,  1734,  1740,
    1746,  1749,  1753,  1756,  1760,  1763,  1767,  1771,  1780,  1792,
    1798,  1802,  1808,  1812,  1818,  1822,  1828,  1832,  1838,  1842,
    1854,  1870,  1876,  1880,  1886,  1890,  1896,  1900,  1906,  1910,
    1923,  1937,  1938,  1942,  1948,  1952,  1958,  1962,  1968,  1972,
    1976,  1982,  1986,  1992,  1996,  2010,  2027,  2031,  2037,  2041,
    2047,  2051,  2057,  2061,  2067,  2071,  2077,  2081,  2087,  2091,
    2096,  2111,  2129,  2135,  2139,  2145,  2149,  2153,  2159,  2163,
    2169,  2173,  2179,  2183,  2189,  2193,  2199,  2204,  2219,  2236,
    2243,  2248,  2254,  2266,  2281,  2295,  2313,  2320,  2330,  2336,
    2341,  2347,  2350,  2358,  2369,  2372,  2380,  2383,  2389,  2395,
    2398
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "ELLIPSIS", "UDP",
  "_HTONS_", "_HTONL_", "BACK_QUOTED", "SA_FAMILY", "SIN_PORT", "SIN_ADDR",
  "ACK", "WIN", "WSCALE", "MSS", "NOP", "TIMESTAMP", "ECR", "EOL",
  "TCPSACK", "VAL", "SACKOK", "OPTION", "IPV4_TYPE", "IPV6_TYPE",
  "INET_ADDR", "SPP_ASSOC_ID", "SPP_ADDRESS", "SPP_HBINTERVAL",
  "SPP_PATHMAXRXT", "SPP_PATHMTU", "SPP_FLAGS", "SPP_IPV6_FLOWLABEL_",
  "SPP_DSCP_", "SINFO_STREAM", "SINFO_SSN", "SINFO_FLAGS", "SINFO_PPID",
  "SINFO_CONTEXT", "SINFO_ASSOC_ID", "SINFO_TIMETOLIVE", "SINFO_TSN",
  "SINFO_CUMTSN", "SINFO_PR_VALUE", "CHUNK", "MYDATA", "MYINIT",
  "MYINIT_ACK", "MYHEARTBEAT", "MYHEARTBEAT_ACK", "MYABORT", "MYSHUTDOWN",
  "MYSHUTDOWN_ACK", "MYERROR", "MYCOOKIE_ECHO", "MYCOOKIE_ACK",
  "MYSHUTDOWN_COMPLETE", "PAD", "ERROR", "HEARTBEAT_INFORMATION",
  "CAUSE_INFO", "MYSACK", "STATE_COOKIE", "PARAMETER", "MYSCTP", "TYPE",
  "FLAGS", "LEN", "MYSUPPORTED_EXTENSIONS", "MYSUPPORTED_ADDRESS_TYPES",
  "TYPES", "CWR", "ECNE", "TAG", "A_RWND", "OS", "IS", "TSN", "MYSID",
  "SSN", "PPID", "CUM_TSN", "GAPS", "DUPS", "MID", "FSN", "SRTO_ASSOC_ID",
  "SRTO_INITIAL", "SRTO_MAX", "SRTO_MIN", "SINIT_NUM_OSTREAMS",
  "SINIT_MAX_INSTREAMS", "SINIT_MAX_ATTEMPTS", "SINIT_MAX_INIT_TIMEO",
  "MYSACK_DELAY", "SACK_FREQ", "ASSOC_VALUE", "ASSOC_ID", "SACK_ASSOC_ID",
  "RECONFIG", "OUTGOING_SSN_RESET", "REQ_SN", "RESP_SN", "LAST_TSN",
  "SIDS", "INCOMING_SSN_RESET", "RECONFIG_RESPONSE", "RESULT",
  "SENDER_NEXT_TSN", "RECEIVER_NEXT_TSN", "SSN_TSN_RESET",
  "ADD_INCOMING_STREAMS", "NUMBER_OF_NEW_STREAMS", "ADD_OUTGOING_STREAMS",
  "RECONFIG_REQUEST_GENERIC", "SRS_ASSOC_ID", "SRS_FLAGS",
  "SRS_NUMBER_STREAMS", "SRS_STREAM_LIST", "SSTAT_ASSOC_ID", "SSTAT_STATE",
  "SSTAT_RWND", "SSTAT_UNACKDATA", "SSTAT_PENDDATA", "SSTAT_INSTRMS",
  "SSTAT_OUTSTRMS", "SSTAT_FRAGMENTATION_POINT", "SSTAT_PRIMARY",
  "SASOC_ASOCMAXRXT", "SASOC_ASSOC_ID", "SASOC_NUMBER_PEER_DESTINATIONS",
  "SASOC_PEER_RWND", "SASOC_LOCAL_RWND", "SASOC_COOKIE_LIFE",
  "SAS_ASSOC_ID", "SAS_INSTRMS", "SAS_OUTSTRMS",
  "MYINVALID_STREAM_IDENTIFIER", "ISID", "MYFLOAT", "INTEGER",
  "HEX_INTEGER", "MYWORD", "MYSTRING", "'='", "'+'", "'*'", "'~'", "'('",
  "')'", "':'", "';'", "'['", "']'", "','", "'<'", "'>'", "'.'", "'-'",
  "'|'", "'{'", "'}'", "$accept", "script", "opt_options", "options",
  "option", "option_flag", "option_value", "events", "event", "event_time",
  "time", "action", "command_spec", "packet_spec", "tcp_packet_spec",
  "udp_packet_spec", "sctp_packet_spec", "sctp_chunk_list", "sctp_chunk",
  "opt_flags", "opt_len", "opt_val", "byte_list", "chunk_types_list",
  "byte", "chunk_type", "opt_data_flags", "opt_abort_flags",
  "opt_shutdown_complete_flags", "opt_tag", "opt_a_rwnd", "opt_os",
  "opt_is", "opt_tsn", "opt_sid", "opt_ssn", "opt_ppid", "opt_cum_tsn",
  "opt_gaps", "opt_dups", "sctp_data_chunk_spec", "sctp_init_chunk_spec",
  "sctp_init_ack_chunk_spec", "sctp_sack_chunk_spec",
  "sctp_heartbeat_chunk_spec", "sctp_heartbeat_ack_chunk_spec",
  "sctp_abort_chunk_spec", "sctp_shutdown_chunk_spec",
  "sctp_shutdown_ack_chunk_spec", "sctp_cookie_echo_chunk_spec",
  "sctp_cookie_ack_chunk_spec", "opt_cause_list", "sctp_cause_list",
  "sctp_invalid_stream_identifier_cause_spec", "sctp_cause_spec",
  "sctp_error_chunk_spec", "sctp_shutdown_complete_chunk_spec",
  "opt_req_sn", "opt_resp_sn", "opt_last_tsn", "opt_result",
  "opt_sender_next_tsn", "opt_receiver_next_tsn",
  "opt_number_of_new_streams", "stream_list", "stream",
  "outgoing_ssn_reset_request", "incoming_ssn_reset_request",
  "ssn_tsn_reset_request", "reconfig_response",
  "add_outgoing_streams_request", "add_incoming_streams_request",
  "sctp_reconfig_chunk_spec", "opt_parameter_list", "sctp_parameter_list",
  "sctp_parameter", "sctp_heartbeat_information_parameter",
  "sctp_supported_extensions_parameter", "address_types_list",
  "address_type", "sctp_supported_address_types_parameter",
  "sctp_state_cookie_parameter", "packet_prefix", "direction", "flags",
  "seq", "opt_ack", "opt_window", "opt_tcp_options", "tcp_option_list",
  "tcp_option", "sack_block_list", "gap_list", "gap", "dup_list", "dup",
  "sack_block", "syscall_spec", "opt_end_time", "function_name",
  "function_arguments", "expression_list", "expression", "decimal_integer",
  "hex_integer", "binary_expression", "array", "srto_initial", "srto_max",
  "srto_min", "sctp_assoc_id", "sctp_rtoinfo", "sasoc_asocmaxrxt",
  "sasoc_number_peer_destinations", "sasoc_peer_rwnd", "sasoc_local_rwnd",
  "sasoc_cookie_life", "sctp_assocparams", "sinit_num_ostreams",
  "sinit_max_instreams", "sinit_max_attempts", "sinit_max_init_timeo",
  "sctp_initmsg", "sockaddr", "spp_address", "spp_hbinterval",
  "spp_pathmtu", "spp_pathmaxrxt", "spp_flags", "spp_ipv6_flowlabel",
  "spp_dscp", "sctp_paddrparams", "sstat_state", "sstat_rwnd",
  "sstat_unackdata", "sstat_penddata", "sstat_instrms", "sstat_outstrms",
  "sstat_fragmentation_point", "sstat_primary", "sctp_status",
  "sinfo_stream", "sinfo_ssn", "sinfo_flags", "sinfo_ppid",
  "sinfo_context", "sinfo_timetolive", "sinfo_tsn", "sinfo_cumtsn",
  "sctp_sndrcvinfo", "srs_flags", "sctp_reset_streams", "sctp_add_streams",
  "sctp_assoc_value", "sack_delay", "sack_freq", "sctp_sackinfo",
  "opt_errno", "opt_note", "note", "word_list", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    61,    43,    42,   126,    40,    41,
      58,    59,    91,    93,    44,    60,    62,    46,    45,   124,
     123,   125
};
#endif

#define YYPACT_NINF (-646)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-352)

#define yytable_value_is_error(Yyn) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      36,  -646,   130,   126,    36,  -646,   -80,  -646,  -646,  -646,
     129,  -646,   126,  -646,    32,   -93,  -646,   -74,   -71,  -646,
     129,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
      10,  -646,  -646,    -6,   129,  -646,  -646,  -646,  -646,    -5,
    -646,    -4,   133,    73,  -646,  -646,    11,  -646,    45,  -646,
     129,    94,   277,  -646,   152,   225,     5,   160,  -646,   168,
     187,   190,   195,   197,   209,   214,   219,   220,   223,   226,
     227,   228,   229,   234,   169,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     124,   237,   375,  -646,   242,   243,  -646,  -646,  -646,   389,
    -646,    18,   254,   -89,   236,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
      39,  -646,   327,   330,   330,   330,   330,   331,   330,   330,
     330,   330,   330,   336,   330,   330,   277,   255,  -646,   266,
     263,   268,   -90,  -646,  -646,   125,   265,   280,   283,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   295,   296,
     297,   298,   299,   300,   301,   256,   284,   302,   303,   304,
     305,   306,   307,  -646,    39,    39,  -112,   308,   309,   310,
     311,   312,   313,   314,   318,   316,   317,   319,   320,   321,
     323,   326,   324,   325,   328,  -646,   315,  -646,   398,  -646,
     329,   332,   334,  -646,   322,    50,    12,    33,    50,    37,
      49,    54,    39,    50,    50,    50,    43,    50,    39,    74,
      50,    50,   333,   358,   350,   356,   420,   363,   414,   368,
     355,   236,   236,   338,   338,    22,   384,    15,   380,   380,
     428,   428,    56,  -646,   408,  -646,    13,   335,   384,  -646,
      64,  -646,   408,   208,   337,   342,   339,   352,   353,  -646,
     474,  -646,   357,  -646,  -113,  -646,  -646,  -646,  -646,   344,
    -646,  -646,  -646,   345,  -646,   488,  -646,  -646,  -646,   346,
    -646,  -646,  -646,  -646,  -646,  -646,   -88,   347,   348,   349,
     351,   354,   236,   359,   360,   236,  -646,  -646,   361,   362,
     364,   365,   366,   367,   369,   373,   370,   377,   371,   378,
     372,   383,   374,   385,   386,   343,   390,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,   387,   379,  -646,  -646,  -646,   391,
     382,   388,   392,   381,   393,  -646,  -646,  -646,  -646,   394,
     395,  -646,   397,   396,  -646,  -646,  -646,   399,  -646,  -646,
    -646,  -646,   400,  -646,   403,   404,   405,   406,   409,   410,
     411,   412,   413,  -646,  -646,  -646,  -646,  -646,  -646,   415,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     401,   402,   357,  -646,   407,  -646,   497,   480,   423,  -646,
     416,   425,   421,   419,   417,   424,   430,    75,   451,    76,
     429,    77,   455,    78,   514,    79,   445,    80,   515,   431,
      81,  -646,  -646,  -120,    82,   491,    83,   496,   496,    58,
    -646,  -646,    84,  -646,   494,   436,   554,   496,    59,   505,
     506,   476,   476,   477,   476,   476,   476,   294,   561,   440,
    -646,  -646,   437,   432,   433,   438,   434,   435,   439,   441,
     446,   447,  -646,  -646,   448,   422,  -646,  -646,   450,   442,
    -646,  -646,   453,   444,  -646,  -646,   456,   449,  -646,  -646,
     457,   452,  -646,  -646,   458,   454,   459,  -646,  -646,  -646,
    -646,  -646,  -646,   460,   461,  -646,  -646,   463,   462,   464,
     466,   467,  -646,  -646,   465,  -646,   468,   469,   470,   472,
     473,   479,   482,   483,   475,   132,   484,   478,   481,   485,
     486,  -646,   471,  -646,   579,   420,   358,    39,   355,   493,
     363,   350,   490,   495,    85,  -646,    86,   499,    87,   492,
      88,   569,    89,   510,    39,   568,   502,    91,   536,    92,
     562,   562,  -646,   554,    93,     1,  -646,   556,  -646,    95,
      14,    17,    97,   477,  -646,   532,    98,   534,  -646,   530,
     530,  -646,   500,   489,   498,   123,   501,   503,   504,   507,
     509,   508,  -646,  -646,  -646,  -646,   511,   512,  -646,  -646,
     513,   516,  -646,  -646,   520,   517,  -646,  -646,   521,   518,
     236,   523,   519,   524,  -646,  -646,   526,   522,  -646,  -646,
     531,   525,   527,   529,   533,   535,  -646,    60,   539,   537,
     538,   540,   542,   244,   543,     9,  -646,  -646,   544,   541,
    -646,  -646,   545,   153,   546,   547,   548,   553,   514,   451,
    -646,  -646,   557,   445,   429,   551,  -646,    99,   566,   100,
    -646,   101,   613,   102,   550,    31,   607,   528,   103,   570,
     104,   574,   574,  -646,  -646,  -646,   549,  -646,  -646,   156,
    -646,    23,   571,   631,   633,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,   158,  -646,  -646,  -646,  -646,  -646,   162,
    -646,   575,   552,   105,  -646,   576,   106,  -646,  -646,   558,
     555,   559,   560,   563,   564,   567,  -646,  -646,   572,   565,
    -646,  -646,  -646,  -646,   577,   573,  -646,  -646,   578,   580,
    -646,   581,   584,   582,   585,  -646,  -646,   586,   583,  -646,
    -646,   587,   588,   589,  -646,  -646,   134,  -646,   107,   591,
     592,   594,   595,   596,   244,   597,     9,   603,   181,   593,
    -646,  -646,   604,   598,  -646,  -646,   599,   569,  -646,   590,
     510,   499,   600,   108,  -646,    39,   624,   109,   616,   611,
     110,   619,  -646,   111,   623,   112,   491,   491,  -646,   601,
     605,   183,  -646,    24,  -646,   657,   702,  -646,  -646,  -646,
    -646,   113,  -646,   602,  -646,   192,  -646,    67,   606,   700,
     608,   612,   609,   610,   614,  -646,  -646,   236,   615,   617,
    -646,  -646,   621,   618,   620,  -646,  -646,   622,   625,  -646,
    -646,   626,   627,  -646,  -646,   328,   328,  -646,   628,  -646,
     634,  -646,   114,   629,   630,  -646,  -646,   632,   635,   593,
    -646,  -646,  -646,   637,   636,   640,   613,   528,   550,   566,
    -646,   115,   679,   116,   641,  -646,   117,   672,    69,  -646,
     638,   639,  -646,  -646,   642,   643,   201,  -646,  -646,  -646,
     644,  -646,  -646,    72,  -646,   694,   645,   646,   647,   648,
    -646,  -646,   650,   649,  -646,  -646,   653,   651,  -646,  -646,
     654,   652,  -646,  -646,  -646,  -646,  -646,  -646,   660,  -646,
     662,   593,  -646,  -646,  -646,   655,   624,  -646,   616,  -646,
     118,  -646,   119,   658,   120,   681,  -646,  -646,   204,   661,
     659,   663,  -646,  -646,  -646,  -646,   664,   665,  -646,  -646,
     667,  -123,   666,   669,   679,   641,   721,  -646,   121,   686,
    -646,  -646,   668,   670,   671,  -646,  -646,  -646,   676,  -646,
    -646,   658,    50,   673,   674,  -646,  -646
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       3,     8,     0,     0,     4,     5,     0,     1,    20,    21,
       0,    17,     2,    12,   234,    16,     6,     0,    15,    13,
       0,    25,   199,   200,    14,    24,    22,    26,    27,    28,
       0,   198,    23,     0,     0,     9,    10,    11,     7,     0,
     235,     0,     0,   201,   202,   204,     0,   236,     0,    18,
       0,     0,     0,   203,     0,   206,     0,     0,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    47,    45,    46,
       0,     0,   208,   241,     0,     0,   263,   264,   247,   248,
     237,     0,     0,     0,   239,   242,   243,   250,   252,   255,
     259,   253,   251,   258,   257,   260,   261,   262,   254,   256,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   207,     0,
     210,     0,     0,   249,   266,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   238,     0,     0,   364,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,     0,
       0,     0,     0,     0,   169,    33,     0,   209,     0,    29,
       0,     0,     0,   267,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   240,   265,     0,   366,     0,     0,     0,     0,     0,
       0,     0,     0,   123,     0,   125,     0,     0,     0,   127,
       0,   137,     0,     0,     0,     0,     0,     0,     0,   215,
       0,   216,     0,   219,     0,   213,   246,   244,   245,     0,
     276,   274,   275,     0,   301,     0,   302,   333,   332,     0,
     269,   268,   292,   291,   359,   358,     0,     0,     0,     0,
     263,   247,     0,   250,     0,   316,   280,   279,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   233,   367,
      80,    82,    81,    83,     0,     0,    48,    50,    49,     0,
       0,     0,     0,     0,     0,    84,    86,    85,    87,     0,
       0,   128,     0,   130,   135,   131,   136,     0,    88,    90,
      89,    91,     0,   168,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   177,   178,   179,   180,   181,   182,   170,
     171,   173,   175,   176,   174,   167,   205,   212,   218,   217,
       0,     0,   220,   222,     0,   211,     0,     0,     0,   357,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   363,   369,     0,     0,     0,     0,     0,     0,     0,
     121,   122,     0,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     223,   214,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   271,   270,     0,     0,   282,   281,     0,     0,
     294,   293,     0,     0,   304,   303,     0,     0,   318,   317,
       0,     0,   335,   334,     0,     0,     0,   361,   360,   370,
     368,    51,    52,     0,     0,    92,    93,     0,     0,     0,
       0,     0,   109,   110,     0,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   172,     0,   232,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   278,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   183,     0,     0,     0,   126,     0,   195,     0,
       0,     0,     0,     0,   160,     0,     0,     0,   162,     0,
       0,   221,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,   272,   284,   283,     0,     0,   296,   295,
       0,     0,   308,   307,     0,     0,   320,   319,     0,     0,
     336,     0,     0,     0,   100,   101,     0,     0,    94,    95,
       0,     0,     0,     0,     0,     0,    53,     0,     0,     0,
       0,     0,     0,    58,     0,   187,   139,   138,     0,     0,
     141,   140,     0,     0,     0,     0,     0,     0,     0,     0,
     356,   362,     0,     0,     0,     0,   355,     0,     0,     0,
     299,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   184,   134,   133,     0,    62,    61,     0,
      56,     0,     0,     0,     0,   185,    65,    66,    67,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    68,
      79,    64,    63,     0,    59,   193,   191,   192,   190,     0,
     188,     0,     0,     0,   163,     0,     0,   166,   165,     0,
       0,     0,     0,     0,     0,     0,   286,   285,     0,     0,
     298,   297,   306,   305,     0,     0,   322,   321,     0,     0,
     338,     0,     0,     0,     0,   102,   103,     0,     0,    96,
      97,     0,     0,     0,    54,    55,     0,   111,   224,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   156,
     145,   144,     0,     0,   153,   152,     0,     0,   277,     0,
       0,     0,     0,     0,   290,     0,     0,     0,     0,     0,
       0,     0,   353,     0,     0,     0,     0,     0,    57,     0,
       0,     0,   225,     0,   120,     0,     0,   186,    60,   194,
     189,     0,   158,     0,   157,     0,   154,     0,     0,     0,
       0,     0,     0,     0,     0,   288,   287,   309,     0,     0,
     324,   323,     0,     0,     0,   340,   339,     0,     0,   104,
     105,     0,     0,    98,    99,   169,   169,   112,     0,   113,
       0,   114,   228,     0,     0,   143,   142,     0,     0,   156,
     148,   146,   147,     0,     0,     0,     0,     0,     0,     0,
     354,     0,     0,     0,     0,   337,     0,     0,     0,   117,
       0,     0,   227,   226,     0,     0,     0,   229,   196,   197,
       0,   161,   155,     0,   164,     0,     0,     0,     0,     0,
     311,   310,     0,     0,   326,   325,     0,     0,   342,   341,
       0,     0,   106,   107,   108,   118,   119,   115,     0,   116,
       0,   156,   151,   149,   150,     0,     0,   352,     0,   289,
       0,   315,     0,     0,     0,     0,   231,   230,     0,     0,
       0,     0,   313,   312,   328,   327,     0,     0,   344,   343,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
     348,   159,     0,     0,     0,   329,   346,   345,     0,   300,
     314,     0,     0,     0,     0,   330,   347
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -646,  -646,  -646,  -646,   728,  -646,  -646,  -646,   745,  -646,
     253,  -646,  -646,  -646,  -646,  -646,  -646,  -646,   678,     3,
    -245,   215,  -646,  -646,    25,    16,  -646,  -646,  -646,   656,
    -399,   232,   135,  -417,  -646,  -646,  -646,   675,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,   418,  -646,  -646,  -293,   224,  -646,
    -646,  -646,  -646,   218,  -115,   -49,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -461,  -646,   426,   127,  -646,  -646,    66,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     443,  -646,  -646,   -15,  -646,   -84,   487,  -646,  -646,  -646,
    -646,   720,  -119,  -646,  -646,   677,  -645,   680,   340,   193,
    -208,  -646,   682,   341,   189,    63,   -21,  -646,  -646,  -646,
    -646,  -646,  -646,   683,   684,   376,    90,   202,   -14,   -73,
     -98,  -646,   685,   427,   205,   122,   -11,   -69,   -95,  -110,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     687,  -646,  -646,  -646,   689,   688,  -646,  -646,  -646,   690,
    -646
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,     2,     3,     4,     5,     6,    38,    12,    13,    14,
      15,    24,    25,    26,    27,    28,    29,    74,    75,   180,
     325,   497,   659,   683,   660,   684,   178,   185,   192,   330,
     488,   601,   732,   484,   597,   728,   822,   340,   609,   740,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,   247,   343,   344,   345,    87,    88,   504,   507,   748,
     623,   753,   844,   625,   795,   796,   363,   364,   365,   366,
     367,   368,    89,   254,   369,   370,   371,   372,   689,   690,
     373,   374,    30,    31,    46,    55,    92,   140,   199,   264,
     265,   382,   781,   782,   866,   867,   383,    32,    33,    48,
      57,   103,   104,   105,   106,   107,   108,   165,   302,   455,
     273,   109,   166,   304,   459,   577,   709,   110,   167,   306,
     463,   581,   111,   112,   168,   308,   585,   467,   715,   809,
     883,   113,   169,   310,   471,   589,   719,   813,   887,   927,
     114,   170,   312,   475,   592,   723,   818,   891,   931,   115,
     171,   116,   117,   118,   172,   315,   119,   234,   318,   317,
     413
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     279,   176,   724,   347,   606,   287,   288,   289,    93,   294,
      94,    95,   298,   299,    41,   274,   341,   612,   326,   489,
     614,    93,   479,    94,    95,   320,   737,   831,   498,   480,
     233,   939,   686,   687,   720,    20,   277,   721,   940,    21,
     280,   384,    93,   385,    94,    95,    93,   175,    94,    95,
     201,   202,   282,   270,    34,   231,   232,   284,     1,   335,
     173,   490,   499,   656,    17,   174,    35,   348,    36,    37,
     840,   175,   892,   389,    42,   902,    39,   296,   452,   456,
     460,   464,   468,   472,   477,   481,   485,   492,   572,   574,
     578,   582,   586,   286,   594,   598,   604,   292,   610,   295,
     616,   620,   706,   710,   712,   716,   725,   729,   750,   754,
     779,   805,   810,   815,   819,   823,   835,   864,   880,   884,
     888,   922,   924,   928,   946,   324,   500,   181,   182,   183,
       7,   186,   187,   188,   189,   190,    47,   193,   194,   505,
      50,   508,   509,   510,    51,    96,    97,    98,    99,   688,
     342,    54,    43,   607,   100,   327,   328,   101,    96,    97,
      98,    99,   321,   322,   323,   102,   613,    44,    45,   615,
     101,   144,   275,   278,   491,   738,   832,   281,   102,    96,
      97,    98,    99,   290,    97,   291,    99,    22,    23,   283,
     271,   101,   272,    56,   285,   101,   336,   337,   338,   102,
     657,   658,   877,   102,   349,   350,   351,   841,   842,   893,
     894,   353,   903,   904,   297,   453,   457,   461,   465,   469,
     473,   478,   482,   486,   493,   573,   575,   579,   583,   587,
      53,   595,   599,   605,    59,   611,    91,   617,   621,   707,
     711,   713,   717,   726,   730,   751,   755,   780,   806,   811,
     816,   820,   824,   836,   865,   881,   885,   889,   923,   925,
     929,   947,   146,    18,   137,     8,     9,   332,     8,     9,
     354,    10,    11,    40,   657,   658,   355,   356,   203,   174,
     147,   148,   175,    52,   630,   554,   555,    49,   149,   666,
     667,   668,   669,   670,   671,   672,   673,   674,   675,   676,
     677,   678,    90,    58,   120,   679,   694,   695,   357,   735,
     736,   743,   744,   358,   359,   745,   746,   121,   360,   361,
     136,   362,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,   792,   793,   829,   830,    72,   122,
     150,   151,   123,   680,   152,   838,   839,   124,   153,   125,
     154,   155,   156,   332,   899,   900,   354,   932,   839,   825,
     826,   126,   355,   356,   860,   861,   127,   333,   334,   157,
     158,   128,   129,   159,   160,   130,    73,   138,   131,   132,
     133,   134,   161,   162,   681,   682,   135,   139,   163,   164,
     141,   142,   143,   177,   357,   175,   179,   184,   565,   358,
     359,   256,   191,   196,   360,   361,   197,   362,   200,   204,
     223,   257,   258,   259,   260,   590,   261,   262,   198,   263,
     257,   258,   259,   260,   205,   261,   262,   206,   263,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   224,   216,
     217,   218,   219,   220,   221,   222,   301,   305,   307,   311,
     314,   324,   235,   329,   237,   255,   225,   226,   227,   228,
     229,   230,   242,   236,   269,   238,   239,   240,   241,   243,
     250,   244,   245,   300,   246,   248,   249,   251,   266,   252,
     303,   267,   253,   268,   309,   313,   316,   332,   346,   339,
     375,   376,   378,   379,   380,   377,   146,   381,   386,   387,
     388,   390,   391,   392,   411,  -349,   442,   148,  -350,   397,
     151,   399,   445,  -351,   393,   394,   395,   401,   396,   153,
     398,   403,   405,   400,   402,   404,   406,   407,   408,   409,
     410,   414,   412,   415,   420,   416,   417,   158,   422,   160,
     454,   438,   418,   466,   419,   161,   421,   462,   423,   424,
     425,   474,   439,   426,   427,   428,   429,   430,   431,   450,
     458,   432,   433,   434,   435,   436,   451,   470,   483,   437,
     487,   476,   494,   342,   496,   501,   502,   503,   512,   506,
     513,   514,   517,   525,   562,   580,   515,   516,   518,   519,
     522,   523,   524,   520,   526,   521,   527,   528,   529,   584,
     530,   532,   534,   531,   537,   591,   533,   539,   535,   544,
     567,   561,   545,   536,   596,   538,   540,   549,   541,   542,
     593,   543,   546,   550,   547,   548,   551,   552,   556,   553,
     570,   576,   557,   588,   558,   571,   619,   600,   608,   559,
     560,   622,   624,   628,   714,   722,   807,   632,   627,   727,
     731,   741,   629,   742,   739,   637,   808,   639,   633,   817,
     833,   634,   631,   635,   641,   643,   638,   645,   647,   636,
     648,   642,   644,   646,   718,   650,   649,   640,   747,   651,
     101,   652,   653,   661,   752,   692,   654,   705,   655,   693,
     696,   662,   663,   699,   664,   665,   685,   702,   691,   708,
     697,   698,   734,   821,   749,   834,   837,   756,   801,   757,
     845,   762,   882,   890,   759,   843,   763,   760,   761,   905,
     758,   765,   767,   930,   945,   948,   764,   766,   770,   769,
     773,   775,    16,   794,   768,   783,   771,   774,   785,   786,
     804,   812,   776,   777,   954,   784,   772,   791,   797,   787,
     789,   814,   798,   799,   827,   828,   847,    19,   603,   851,
     788,   778,   846,   848,   849,   853,   856,   886,   862,   855,
     858,   852,   854,   602,   780,   850,   870,   618,   626,   857,
     859,   873,   868,   869,   875,   926,   918,   733,   871,   874,
     872,   895,   896,   898,   910,   897,   901,   912,   914,   906,
     916,   908,   865,   919,   933,   913,   915,   907,   936,   909,
     911,   938,   790,   934,   195,   863,   917,   935,   942,   941,
     952,   145,   701,   704,   803,   951,   937,   441,   879,   949,
     700,   950,   876,   920,   955,   956,   943,   878,   703,   921,
     944,   953,     0,   495,     0,     0,     0,   800,     0,     0,
       0,     0,     0,     0,     0,     0,   564,     0,     0,     0,
       0,     0,   569,   511,     0,     0,     0,     0,     0,   440,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   802,     0,     0,     0,     0,     0,     0,   276,
       0,   563,     0,   293,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   319,     0,     0,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   568,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   444,     0,
       0,   443,     0,     0,     0,     0,   449,     0,   448,   447,
     446,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   566
};

static const yytype_int16 yycheck[] =
{
     208,   120,   647,   248,     3,   213,   214,   215,     3,   217,
       5,     6,   220,   221,     4,     3,     3,     3,     3,   418,
       3,     3,   142,     5,     6,     3,     3,     3,   427,   149,
     142,   154,    23,    24,     3,     3,     3,     6,   161,     7,
       3,   154,     3,   156,     5,     6,     3,   159,     5,     6,
     140,   141,     3,     3,   147,   174,   175,     3,    22,     3,
     149,     3,     3,     3,   144,   154,   140,     3,   142,   143,
       3,   159,     3,   161,    64,     3,   147,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,   212,     3,     3,     3,   216,     3,   218,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,    67,    67,   124,   125,   126,
       0,   128,   129,   130,   131,   132,   142,   134,   135,   432,
     145,   434,   435,   436,   148,   140,   141,   142,   143,   140,
     137,   140,   142,   152,   149,   140,   141,   152,   140,   141,
     142,   143,   140,   141,   142,   160,   152,   157,   158,   152,
     152,   153,   160,   140,   419,   152,   152,   140,   160,   140,
     141,   142,   143,   140,   141,   142,   143,   155,   156,   140,
     140,   152,   142,   148,   140,   152,   140,   141,   142,   160,
     140,   141,   847,   160,   140,   141,   142,   140,   141,   140,
     141,     3,   140,   141,   140,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
     157,   140,   140,   140,   140,   140,    11,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
     140,   140,     8,    10,   140,   139,   140,    59,   139,   140,
      62,   145,   146,    20,   140,   141,    68,    69,   153,   154,
      26,    27,   159,   150,   161,   153,   154,    34,    34,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,   150,    50,   144,    61,   153,   154,   100,   153,
     154,   153,   154,   105,   106,   153,   154,   149,   110,   111,
     151,   113,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,   153,   154,   153,   154,    61,   152,
      86,    87,   152,    99,    90,   153,   154,   152,    94,   152,
      96,    97,    98,    59,   153,   154,    62,   153,   154,   776,
     777,   152,    68,    69,   825,   826,   152,   240,   241,   115,
     116,   152,   152,   119,   120,   152,    99,   140,   152,   152,
     152,   152,   128,   129,   140,   141,   152,    12,   134,   135,
     148,   148,     3,    66,   100,   159,    66,    66,   517,   105,
     106,     3,    66,   148,   110,   111,   140,   113,   140,   144,
     154,    13,    14,    15,    16,   534,    18,    19,   155,    21,
      13,    14,    15,    16,   144,    18,    19,   144,    21,   144,
     144,   144,   144,   144,   144,   144,   144,   144,   154,   144,
     144,   144,   144,   144,   144,   144,    88,    91,    28,    35,
      95,    67,   144,    73,   144,   140,   154,   154,   154,   154,
     154,   154,   144,   154,   142,   154,   154,   154,   154,   153,
     144,   154,   153,   140,   154,   154,   153,   153,   149,   154,
     130,   149,   154,   149,   121,   117,   148,    59,   153,    81,
     153,   149,   140,   140,    20,   156,     8,   140,   154,   154,
     154,   154,   154,   154,   161,   154,     9,    27,   154,   144,
      87,   144,    96,   154,   154,   154,   154,   144,   154,    94,
     154,   144,   144,   154,   154,   154,   154,   144,   154,   144,
     144,   144,   142,   154,   153,   144,   154,   116,   144,   120,
      89,   140,   154,    29,   152,   128,   153,    92,   153,   152,
     154,    36,   150,   154,   154,   152,   152,   152,   152,   135,
     131,   152,   152,   152,   152,   152,   136,   122,    77,   154,
      74,   140,    78,   137,    20,    70,    70,   101,    17,   102,
     140,   144,   144,   161,     5,    93,   154,   154,   154,   154,
     144,   144,   144,   154,   144,   154,   154,   144,   154,    30,
     144,   144,   144,   154,   144,    37,   154,   144,   154,   144,
     117,   140,   144,   154,    78,   154,   154,   144,   154,   153,
     118,   154,   153,   144,   154,   153,   144,   144,   144,   154,
     140,   132,   154,   123,   153,   140,   104,    75,    82,   154,
     154,   107,   112,   154,    31,    38,   765,   144,   148,    79,
      76,    20,   154,    20,    83,   144,    32,   144,   154,    40,
       3,   154,   161,   154,   144,   144,   154,   144,   144,   161,
     144,   154,   154,   154,   124,   144,   154,   161,   103,   154,
     152,   154,   153,   144,   108,   144,   153,   136,   153,   144,
     144,   154,   154,   140,   154,   153,   153,   140,   154,   133,
     153,   153,   153,    80,   152,     3,   104,   149,   118,   154,
      10,   144,    33,    41,   154,   109,   144,   154,   154,    25,
     161,   144,   144,    42,     3,    39,   161,   154,   144,   148,
     144,   144,     4,   140,   154,   144,   154,   154,   144,   144,
     140,   125,   154,   154,   952,   153,   161,   144,   144,   153,
     153,   140,   154,   154,   153,   150,   144,    12,   543,   144,
     744,   736,   154,   154,   154,   144,   144,   126,   140,   149,
     144,   154,   154,   541,   140,   161,   144,   553,   560,   154,
     153,   144,   153,   153,   144,   127,   901,   652,   153,   153,
     839,   153,   153,   150,   144,   153,   152,   144,   144,   154,
     140,   154,   140,   148,   143,   154,   154,   161,   144,   161,
     161,   144,   746,   154,   136,   830,   900,   154,   149,   153,
     144,   101,   629,   634,   761,   154,   161,   384,   849,   161,
     628,   161,   846,   906,   161,   161,   934,   848,   633,   908,
     935,   951,    -1,   425,    -1,    -1,    -1,   757,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,
      -1,    -1,   521,   437,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   760,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,   515,    -1,   216,    -1,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,   252,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,
      -1,   387,    -1,    -1,    -1,    -1,   394,    -1,   393,   392,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   518
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,   163,   164,   165,   166,   167,     0,   139,   140,
     145,   146,   169,   170,   171,   172,   166,   144,   172,   170,
       3,     7,   155,   156,   173,   174,   175,   176,   177,   178,
     244,   245,   259,   260,   147,   140,   142,   143,   168,   147,
     172,     4,    64,   142,   157,   158,   246,   142,   261,   172,
     145,   148,   150,   157,   140,   247,   148,   262,   172,   140,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    61,    99,   179,   180,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   217,   218,   234,
     150,    11,   248,     3,     5,     6,   140,   141,   142,   143,
     149,   152,   160,   263,   264,   265,   266,   267,   268,   273,
     279,   284,   285,   293,   302,   311,   313,   314,   315,   318,
     144,   149,   152,   152,   152,   152,   152,   152,   152,   152,
     152,   152,   152,   152,   152,   152,   151,   140,   140,    12,
     249,   148,   148,     3,   153,   263,     8,    26,    27,    34,
      86,    87,    90,    94,    96,    97,    98,   115,   116,   119,
     120,   128,   129,   134,   135,   269,   274,   280,   286,   294,
     303,   312,   316,   149,   154,   159,   264,    66,   188,    66,
     181,   181,   181,   181,    66,   189,   181,   181,   181,   181,
     181,    66,   190,   181,   181,   180,   148,   140,   155,   250,
     140,   140,   141,   153,   144,   144,   144,   144,   144,   144,
     144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
     144,   144,   144,   154,   154,   154,   154,   154,   154,   154,
     154,   264,   264,   142,   319,   144,   154,   144,   154,   154,
     154,   154,   144,   153,   154,   153,   154,   213,   154,   153,
     144,   153,   154,   154,   235,   140,     3,    13,    14,    15,
      16,    18,    19,    21,   251,   252,   149,   149,   149,   142,
       3,   140,   142,   272,     3,   160,   285,     3,   140,   272,
       3,   140,     3,   140,     3,   140,   264,   272,   272,   272,
     140,   142,   264,   267,   272,   264,     3,   140,   272,   272,
     140,    88,   270,   130,   275,    91,   281,    28,   287,   121,
     295,    35,   304,   117,    95,   317,   148,   321,   320,   321,
       3,   140,   141,   142,    67,   182,     3,   140,   141,    73,
     191,   191,    59,   238,   238,     3,   140,   141,   142,    81,
     199,     3,   137,   214,   215,   216,   153,   182,     3,   140,
     141,   142,   199,     3,    62,    68,    69,   100,   105,   106,
     110,   111,   113,   228,   229,   230,   231,   232,   233,   236,
     237,   238,   239,   242,   243,   153,   149,   156,   140,   140,
      20,   140,   253,   258,   154,   156,   154,   154,   154,   161,
     154,   154,   154,   154,   154,   154,   154,   144,   154,   144,
     154,   144,   154,   144,   154,   144,   154,   144,   154,   144,
     144,   161,   142,   322,   144,   154,   144,   154,   154,   152,
     153,   153,   144,   153,   152,   154,   154,   154,   152,   152,
     152,   152,   152,   152,   152,   152,   152,   154,   140,   150,
     258,   252,     9,   286,   269,    96,   316,   312,   294,   274,
     135,   136,     3,   140,    89,   271,     3,   140,   131,   276,
       3,   140,    92,   282,     3,   140,    29,   289,     3,   140,
     122,   296,     3,   140,    36,   305,   140,     3,   140,   142,
     149,     3,   140,    77,   195,     3,   140,    74,   192,   192,
       3,   182,     3,   140,    78,   216,    20,   183,   192,     3,
      67,    70,    70,   101,   219,   219,   102,   220,   219,   219,
     219,   237,    17,   140,   144,   154,   154,   144,   154,   154,
     154,   154,   144,   144,   144,   161,   144,   154,   144,   154,
     144,   154,   144,   154,   144,   154,   154,   144,   154,   144,
     154,   154,   153,   154,   144,   144,   153,   154,   153,   144,
     144,   144,   144,   154,   153,   154,   144,   154,   153,   154,
     154,   140,     5,   287,   270,   264,   317,   117,   295,   275,
     140,   140,     3,   140,     3,   140,   132,   277,     3,   140,
      93,   283,     3,   140,    30,   288,     3,   140,   123,   297,
     264,    37,   306,   118,     3,   140,    78,   196,     3,   140,
      75,   193,   193,   183,     3,   140,     3,   152,    82,   200,
       3,   140,     3,   152,     3,   152,     3,   140,   220,   104,
       3,   140,   107,   222,   112,   225,   225,   148,   154,   154,
     161,   161,   144,   154,   154,   154,   161,   144,   154,   144,
     161,   144,   154,   144,   154,   144,   154,   144,   144,   154,
     144,   154,   154,   153,   153,   153,     3,   140,   141,   184,
     186,   144,   154,   154,   154,   153,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    61,
      99,   140,   141,   185,   187,   153,    23,    24,   140,   240,
     241,   154,   144,   144,   153,   154,   144,   153,   153,   140,
     289,   271,   140,   296,   276,   136,     3,   140,   133,   278,
       3,   140,     3,   140,    31,   290,     3,   140,   124,   298,
       3,     6,    38,   307,   268,     3,   140,    79,   197,     3,
     140,    76,   194,   194,   153,   153,   154,     3,   152,    83,
     201,    20,    20,   153,   154,   153,   154,   103,   221,   152,
       3,   140,   108,   223,     3,   140,   149,   154,   161,   154,
     154,   154,   144,   144,   161,   144,   154,   144,   154,   148,
     144,   154,   161,   144,   154,   144,   154,   154,   186,     3,
     140,   254,   255,   144,   153,   144,   144,   153,   187,   153,
     241,   144,   153,   154,   140,   226,   227,   144,   154,   154,
     288,   118,   297,   277,   140,     3,   140,   264,    32,   291,
       3,   140,   125,   299,   140,     3,   140,    40,   308,     3,
     140,    80,   198,     3,   140,   195,   195,   153,   150,   153,
     154,     3,   152,     3,     3,     3,   140,   104,   153,   154,
       3,   140,   141,   109,   224,    10,   154,   144,   154,   154,
     161,   144,   154,   144,   154,   149,   144,   154,   144,   153,
     235,   235,   140,   255,     3,   140,   256,   257,   153,   153,
     144,   153,   227,   144,   153,   144,   290,   268,   298,   278,
       3,   140,    33,   292,     3,   140,   126,   300,     3,   140,
      41,   309,     3,   140,   141,   153,   153,   153,   150,   153,
     154,   152,     3,   140,   141,    25,   154,   161,   154,   161,
     144,   161,   144,   154,   144,   154,   140,   257,   226,   148,
     291,   299,     3,   140,     3,   140,   127,   301,     3,   140,
      42,   310,   153,   143,   154,   154,   144,   161,   144,   154,
     161,   153,   149,   292,   300,     3,     3,   140,    39,   161,
     161,   154,   144,   301,   272,   161,   161
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   162,   163,   164,   164,   165,   165,   166,   167,   168,
     168,   168,   169,   169,   170,   171,   171,   171,   171,   171,
     172,   172,   173,   173,   173,   174,   175,   175,   175,   176,
     177,   178,   179,   179,   180,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   180,   180,   180,   181,   181,
     181,   182,   182,   183,   183,   183,   184,   184,   185,   185,
     185,   186,   186,   187,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     188,   188,   188,   188,   189,   189,   189,   189,   190,   190,
     190,   190,   191,   191,   192,   192,   193,   193,   194,   194,
     195,   195,   196,   196,   197,   197,   198,   198,   198,   199,
     199,   200,   200,   200,   201,   201,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   213,
     213,   214,   214,   215,   215,   216,   217,   218,   219,   219,
     220,   220,   221,   221,   222,   222,   223,   223,   223,   224,
     224,   224,   225,   225,   226,   226,   227,   227,   228,   228,
     229,   229,   230,   231,   231,   232,   233,   234,   235,   235,
     235,   236,   236,   237,   237,   237,   237,   237,   237,   237,
     237,   237,   237,   238,   238,   239,   239,   240,   240,   240,
     241,   241,   241,   242,   242,   243,   243,   243,   244,   245,
     245,   246,   246,   246,   246,   247,   248,   248,   249,   249,
     250,   250,   250,   251,   251,   252,   252,   252,   252,   252,
     252,   252,   253,   253,   254,   254,   254,   255,   256,   256,
     256,   257,   258,   259,   260,   260,   261,   262,   262,   263,
     263,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   265,   266,   267,   268,   268,   269,   269,
     270,   270,   271,   271,   272,   272,   272,   273,   273,   274,
     274,   275,   275,   276,   276,   277,   277,   278,   278,   279,
     279,   280,   280,   281,   281,   282,   282,   283,   283,   284,
     285,   286,   286,   287,   287,   288,   288,   289,   289,   290,
     291,   291,   292,   292,   293,   293,   294,   295,   295,   296,
     296,   297,   297,   298,   298,   299,   299,   300,   300,   301,
     302,   302,   303,   303,   304,   304,   305,   306,   306,   307,
     307,   308,   308,   309,   309,   310,   310,   311,   311,   312,
     312,   312,   313,   313,   314,   314,   315,   315,   316,   316,
     317,   317,   318,   318,   319,   319,   320,   320,   321,   322,
     322
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     2,     0,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     3,     5,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     6,
       5,     4,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     5,     5,     1,     3,     0,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     5,     3,     5,     5,    14,    15,    15,
      12,     6,     6,     4,     6,     4,     8,     4,     2,     0,
       2,     1,     3,     6,     6,     1,     5,     4,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     0,     1,     8,    14,
       4,    10,     4,     6,    10,     6,     6,     5,     2,     0,
       2,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     6,     6,     8,     0,     1,     3,
       1,     1,     1,     6,     8,     4,    10,    10,     1,     1,
       1,     1,     1,     2,     1,     6,     0,     2,     0,     2,
       0,     3,     3,     1,     3,     1,     1,     2,     2,     1,
       2,     5,     1,     2,     0,     1,     3,     3,     0,     1,
       3,     3,     3,     7,     0,     2,     1,     2,     3,     1,
       3,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,    11,     7,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,    15,
      11,     3,     3,     3,     3,     3,     3,     3,     3,     9,
      19,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,    19,    15,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
      21,    17,     3,     3,     3,     3,     3,     6,     3,     3,
       3,     3,     3,     3,     3,     3,     3,    21,    17,     3,
       3,     3,    15,    11,    13,     9,     9,     5,     3,     3,
       3,     3,     9,     5,     0,     2,     0,     1,     3,     1,
       2
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YY_LOCATION_PRINT
#  if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#   define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

#  else
#   define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#  endif
# endif /* !defined YY_LOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yykind < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yykind], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/* Lookahead token kind.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
/* Number of syntax errors so far.  */
int yynerrs;




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* script: opt_options events  */
#line 354 "parser.y"
                     {
    (yyval.string) = NULL;    /* The parser output is in out_script */
}
#line 2453 "parser.cc"
    break;

  case 3: /* opt_options: %empty  */
#line 360 "parser.y"
  { (yyval.option) = NULL;
    parse_and_finalize_config(invocation);}
#line 2460 "parser.cc"
    break;

  case 4: /* opt_options: options  */
#line 362 "parser.y"
          {
    (yyval.option) = (yyvsp[0].option);
    parse_and_finalize_config(invocation);
}
#line 2469 "parser.cc"
    break;

  case 5: /* options: option  */
#line 369 "parser.y"
         {
    out_script->addOption((yyvsp[0].option));
    (yyval.option) = (yyvsp[0].option);    /* return the tail so we can append to it */
}
#line 2478 "parser.cc"
    break;

  case 6: /* options: options option  */
#line 373 "parser.y"
                 {
    out_script->addOption((yyvsp[0].option));
    (yyval.option) = (yyvsp[0].option);    /* return the tail so we can append to it */
}
#line 2487 "parser.cc"
    break;

  case 7: /* option: option_flag '=' option_value  */
#line 380 "parser.y"
                               {
    (yyval.option) = new PacketDrillOption((yyvsp[-2].string), (yyvsp[0].string));
}
#line 2495 "parser.cc"
    break;

  case 8: /* option_flag: OPTION  */
#line 385 "parser.y"
         { (yyval.string) = (yyvsp[0].reserved); }
#line 2501 "parser.cc"
    break;

  case 9: /* option_value: INTEGER  */
#line 389 "parser.y"
            { (yyval.string) = strdup(yytext); }
#line 2507 "parser.cc"
    break;

  case 10: /* option_value: MYWORD  */
#line 390 "parser.y"
            { (yyval.string) = (yyvsp[0].string); }
#line 2513 "parser.cc"
    break;

  case 11: /* option_value: MYSTRING  */
#line 391 "parser.y"
            { (yyval.string) = (yyvsp[0].string); }
#line 2519 "parser.cc"
    break;

  case 12: /* events: event  */
#line 396 "parser.y"
        {
    out_script->addEvent((yyvsp[0].event));    /* save pointer to event list as output of parser */
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 2528 "parser.cc"
    break;

  case 13: /* events: events event  */
#line 400 "parser.y"
               {
    out_script->addEvent((yyvsp[0].event));
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 2537 "parser.cc"
    break;

  case 14: /* event: event_time action  */
#line 407 "parser.y"
                    {
    (yyval.event) = (yyvsp[0].event);
    (yyval.event)->setLineNumber((yyvsp[-1].event)->getLineNumber());    /* use timestamp's line */
    (yyval.event)->setEventTime((yyvsp[-1].event)->getEventTime());
    (yyval.event)->setEventTimeEnd((yyvsp[-1].event)->getEventTimeEnd());
    (yyval.event)->setTimeType((yyvsp[-1].event)->getTimeType());
    (yyvsp[-1].event)->getLineNumber(),
    (yyvsp[-1].event)->getEventTime().dbl(),
    (yyvsp[-1].event)->getEventTimeEnd().dbl(),
    (yyvsp[-1].event)->getTimeType();
    if ((yyval.event)->getEventTimeEnd() != NO_TIME_RANGE) {
        if ((yyval.event)->getEventTimeEnd() < (yyval.event)->getEventTime())
            semantic_error("time range is backwards");
    }
    if ((yyval.event)->getTimeType() == ANY_TIME &&  ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        semantic_error("event time <star> can only be used with outbound packets");
    } else if (((yyval.event)->getTimeType() == ABSOLUTE_RANGE_TIME ||
        (yyval.event)->getTimeType() == RELATIVE_RANGE_TIME) &&
        ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        semantic_error("event time range can only be used with outbound packets");
    }
    delete((yyvsp[-1].event));
}
#line 2569 "parser.cc"
    break;

  case 15: /* event_time: '+' time  */
#line 437 "parser.y"
           {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(RELATIVE_TIME);
}
#line 2580 "parser.cc"
    break;

  case 16: /* event_time: time  */
#line 443 "parser.y"
       {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(ABSOLUTE_TIME);
}
#line 2591 "parser.cc"
    break;

  case 17: /* event_time: '*'  */
#line 449 "parser.y"
      {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setTimeType(ANY_TIME);
}
#line 2601 "parser.cc"
    break;

  case 18: /* event_time: time '~' time  */
#line 454 "parser.y"
                {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-2]).first_line);
    (yyval.event)->setTimeType(ABSOLUTE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-2].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 2613 "parser.cc"
    break;

  case 19: /* event_time: '+' time '~' '+' time  */
#line 461 "parser.y"
                        {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-4]).first_line);
    (yyval.event)->setTimeType(RELATIVE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-3].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 2625 "parser.cc"
    break;

  case 20: /* time: MYFLOAT  */
#line 471 "parser.y"
          {
    if ((yyvsp[0].floating) < 0) {
        semantic_error("negative time");
    }
    (yyval.time_usecs) = (int64_t)((yyvsp[0].floating) * 1.0e6); /* convert float secs to s64 microseconds */
}
#line 2636 "parser.cc"
    break;

  case 21: /* time: INTEGER  */
#line 477 "parser.y"
          {
    if ((yyvsp[0].integer) < 0) {
        semantic_error("negative time");
    }
    (yyval.time_usecs) = (int64_t)((yyvsp[0].integer) * 1000000); /* convert int secs to s64 microseconds */
}
#line 2647 "parser.cc"
    break;

  case 22: /* action: packet_spec  */
#line 486 "parser.y"
              {
    if ((yyvsp[0].packet)) {
        (yyval.event) = new PacketDrillEvent(PACKET_EVENT);  (yyval.event)->setPacket((yyvsp[0].packet));
    } else {
        (yyval.event) = NULL;
    }
}
#line 2659 "parser.cc"
    break;

  case 23: /* action: syscall_spec  */
#line 493 "parser.y"
               {
    (yyval.event) = new PacketDrillEvent(SYSCALL_EVENT);
    (yyval.event)->setSyscall((yyvsp[0].syscall));
}
#line 2668 "parser.cc"
    break;

  case 24: /* action: command_spec  */
#line 497 "parser.y"
               {
    (yyval.event) = new PacketDrillEvent(COMMAND_EVENT);
    (yyval.event)->setCommand((yyvsp[0].command));
}
#line 2677 "parser.cc"
    break;

  case 25: /* command_spec: BACK_QUOTED  */
#line 504 "parser.y"
                    {
    (yyval.command) = (struct command_spec *)calloc(1, sizeof(struct command_spec));
    (yyval.command)->command_line = (yyvsp[0].reserved);
}
#line 2686 "parser.cc"
    break;

  case 26: /* packet_spec: tcp_packet_spec  */
#line 511 "parser.y"
                  {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2694 "parser.cc"
    break;

  case 27: /* packet_spec: udp_packet_spec  */
#line 514 "parser.y"
                  {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2702 "parser.cc"
    break;

  case 28: /* packet_spec: sctp_packet_spec  */
#line 517 "parser.y"
                   {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2710 "parser.cc"
    break;

  case 29: /* tcp_packet_spec: packet_prefix flags seq opt_ack opt_window opt_tcp_options  */
#line 523 "parser.y"
                                                             {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-5].packet), *inner = NULL;
    enum direction_t direction = outer->getDirection();

    if (((yyvsp[0].tcp_options) == NULL) && (direction != DIRECTION_OUTBOUND)) {
        yylineno = (yylsp[0]).first_line;
        printf("<...> for TCP options can only be used with outbound packets");
    }
    Packet *pkt = PacketDrill::buildTCPPacket(in_config->getWireProtocol(), direction,
                                               (yyvsp[-4].string),
                                               (yyvsp[-3].tcp_sequence_info).start_sequence, (yyvsp[-3].tcp_sequence_info).payload_bytes,
                                               (yyvsp[-2].sequence_number), (yyvsp[-1].window), (yyvsp[0].tcp_options), &error);

    free((yyvsp[-4].string));

    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);

    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2738 "parser.cc"
    break;

  case 30: /* udp_packet_spec: packet_prefix UDP '(' INTEGER ')'  */
#line 549 "parser.y"
                                    {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-4].packet), *inner = NULL;

    enum direction_t direction = outer->getDirection();
    Packet* pkt = PacketDrill::buildUDPPacket(in_config->getWireProtocol(), direction, (yyvsp[-1].integer), &error);
    if (direction == DIRECTION_INBOUND)
        pkt->setName("parserInbound");
    else
        pkt->setName("parserOutbound");
    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);
    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2759 "parser.cc"
    break;

  case 31: /* sctp_packet_spec: packet_prefix MYSCTP ':' sctp_chunk_list  */
#line 568 "parser.y"
                                           {
    PacketDrillPacket *inner = NULL;
    enum direction_t direction = (yyvsp[-3].packet)->getDirection();
    Packet* pkt = PacketDrill::buildSCTPPacket(in_config->getWireProtocol(), direction, (yyvsp[0].sctp_chunk_list));
    if (pkt) {
        if (direction == DIRECTION_INBOUND)
            pkt->setName("parserInbound");
        else
            pkt->setName("parserOutbound");
        inner = new PacketDrillPacket();
        inner->setInetPacket(pkt);
        inner->setDirection(direction);
    } else {
        semantic_error("inbound packets must be fully specified");
    }
    (yyval.packet) = inner;
}
#line 2781 "parser.cc"
    break;

  case 32: /* sctp_chunk_list: sctp_chunk  */
#line 588 "parser.y"
                                 { (yyval.sctp_chunk_list) = new cQueue("sctpChunkList");
                                   (yyval.sctp_chunk_list)->insert((cObject*)(yyvsp[0].sctp_chunk)); }
#line 2788 "parser.cc"
    break;

  case 33: /* sctp_chunk_list: sctp_chunk_list ';' sctp_chunk  */
#line 590 "parser.y"
                                 { (yyval.sctp_chunk_list) = (yyvsp[-2].sctp_chunk_list);
                                   (yyval.sctp_chunk_list)->insert((yyvsp[0].sctp_chunk)); }
#line 2795 "parser.cc"
    break;

  case 34: /* sctp_chunk: sctp_data_chunk_spec  */
#line 596 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2801 "parser.cc"
    break;

  case 35: /* sctp_chunk: sctp_init_chunk_spec  */
#line 597 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2807 "parser.cc"
    break;

  case 36: /* sctp_chunk: sctp_init_ack_chunk_spec  */
#line 598 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2813 "parser.cc"
    break;

  case 37: /* sctp_chunk: sctp_sack_chunk_spec  */
#line 599 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2819 "parser.cc"
    break;

  case 38: /* sctp_chunk: sctp_heartbeat_chunk_spec  */
#line 600 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2825 "parser.cc"
    break;

  case 39: /* sctp_chunk: sctp_heartbeat_ack_chunk_spec  */
#line 601 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2831 "parser.cc"
    break;

  case 40: /* sctp_chunk: sctp_abort_chunk_spec  */
#line 602 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2837 "parser.cc"
    break;

  case 41: /* sctp_chunk: sctp_shutdown_chunk_spec  */
#line 603 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2843 "parser.cc"
    break;

  case 42: /* sctp_chunk: sctp_shutdown_ack_chunk_spec  */
#line 604 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2849 "parser.cc"
    break;

  case 43: /* sctp_chunk: sctp_cookie_echo_chunk_spec  */
#line 605 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2855 "parser.cc"
    break;

  case 44: /* sctp_chunk: sctp_cookie_ack_chunk_spec  */
#line 606 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2861 "parser.cc"
    break;

  case 45: /* sctp_chunk: sctp_shutdown_complete_chunk_spec  */
#line 607 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2867 "parser.cc"
    break;

  case 46: /* sctp_chunk: sctp_reconfig_chunk_spec  */
#line 608 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2873 "parser.cc"
    break;

  case 47: /* sctp_chunk: sctp_error_chunk_spec  */
#line 609 "parser.y"
                                    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2879 "parser.cc"
    break;

  case 48: /* opt_flags: FLAGS '=' ELLIPSIS  */
#line 614 "parser.y"
                        { (yyval.integer) = -1; }
#line 2885 "parser.cc"
    break;

  case 49: /* opt_flags: FLAGS '=' HEX_INTEGER  */
#line 615 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2896 "parser.cc"
    break;

  case 50: /* opt_flags: FLAGS '=' INTEGER  */
#line 621 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2907 "parser.cc"
    break;

  case 51: /* opt_len: LEN '=' ELLIPSIS  */
#line 630 "parser.y"
                   { (yyval.integer) = -1; }
#line 2913 "parser.cc"
    break;

  case 52: /* opt_len: LEN '=' INTEGER  */
#line 631 "parser.y"
                   {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("length value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2924 "parser.cc"
    break;

  case 53: /* opt_val: VAL '=' ELLIPSIS  */
#line 640 "parser.y"
                            { (yyval.byte_list) = NULL; }
#line 2930 "parser.cc"
    break;

  case 54: /* opt_val: VAL '=' '[' ELLIPSIS ']'  */
#line 641 "parser.y"
                            { (yyval.byte_list) = NULL; }
#line 2936 "parser.cc"
    break;

  case 55: /* opt_val: VAL '=' '[' byte_list ']'  */
#line 642 "parser.y"
                            { (yyval.byte_list) = (yyvsp[-1].byte_list); }
#line 2942 "parser.cc"
    break;

  case 56: /* byte_list: byte  */
#line 646 "parser.y"
                     { (yyval.byte_list) = new PacketDrillBytes((yyvsp[0].byte)); }
#line 2948 "parser.cc"
    break;

  case 57: /* byte_list: byte_list ',' byte  */
#line 647 "parser.y"
                     { (yyval.byte_list) = (yyvsp[-2].byte_list);
                       (yyvsp[-2].byte_list)->appendByte((yyvsp[0].byte)); }
#line 2955 "parser.cc"
    break;

  case 58: /* chunk_types_list: %empty  */
#line 652 "parser.y"
  { (yyval.byte_list) = new PacketDrillBytes();}
#line 2961 "parser.cc"
    break;

  case 59: /* chunk_types_list: chunk_type  */
#line 653 "parser.y"
                     { (yyval.byte_list) = new PacketDrillBytes((yyvsp[0].integer));}
#line 2967 "parser.cc"
    break;

  case 60: /* chunk_types_list: chunk_types_list ',' chunk_type  */
#line 654 "parser.y"
                                  { (yyval.byte_list) = (yyvsp[-2].byte_list);
                       (yyvsp[-2].byte_list)->appendByte((yyvsp[0].integer)); }
#line 2974 "parser.cc"
    break;

  case 61: /* byte: HEX_INTEGER  */
#line 659 "parser.y"
              {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("byte value out of range");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 2985 "parser.cc"
    break;

  case 62: /* byte: INTEGER  */
#line 665 "parser.y"
          {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("byte value out of range");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 2996 "parser.cc"
    break;

  case 63: /* chunk_type: HEX_INTEGER  */
#line 674 "parser.y"
              {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("type value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3007 "parser.cc"
    break;

  case 64: /* chunk_type: INTEGER  */
#line 680 "parser.y"
          {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("type value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3018 "parser.cc"
    break;

  case 65: /* chunk_type: MYDATA  */
#line 686 "parser.y"
         {
    (yyval.integer) = SCTP_DATA_CHUNK_TYPE;
}
#line 3026 "parser.cc"
    break;

  case 66: /* chunk_type: MYINIT  */
#line 689 "parser.y"
         {
    (yyval.integer) = SCTP_INIT_CHUNK_TYPE;
}
#line 3034 "parser.cc"
    break;

  case 67: /* chunk_type: MYINIT_ACK  */
#line 692 "parser.y"
             {
    (yyval.integer) = SCTP_INIT_ACK_CHUNK_TYPE;
}
#line 3042 "parser.cc"
    break;

  case 68: /* chunk_type: MYSACK  */
#line 695 "parser.y"
         {
    (yyval.integer) = SCTP_SACK_CHUNK_TYPE;
}
#line 3050 "parser.cc"
    break;

  case 69: /* chunk_type: MYHEARTBEAT  */
#line 698 "parser.y"
              {
    (yyval.integer) = SCTP_HEARTBEAT_CHUNK_TYPE;
}
#line 3058 "parser.cc"
    break;

  case 70: /* chunk_type: MYHEARTBEAT_ACK  */
#line 701 "parser.y"
                  {
    (yyval.integer) = SCTP_HEARTBEAT_ACK_CHUNK_TYPE;
}
#line 3066 "parser.cc"
    break;

  case 71: /* chunk_type: MYABORT  */
#line 704 "parser.y"
          {
    (yyval.integer) = SCTP_ABORT_CHUNK_TYPE;
}
#line 3074 "parser.cc"
    break;

  case 72: /* chunk_type: MYSHUTDOWN  */
#line 707 "parser.y"
             {
    (yyval.integer) = SCTP_SHUTDOWN_CHUNK_TYPE;
}
#line 3082 "parser.cc"
    break;

  case 73: /* chunk_type: MYSHUTDOWN_ACK  */
#line 710 "parser.y"
                 {
    (yyval.integer) = SCTP_SHUTDOWN_ACK_CHUNK_TYPE;
}
#line 3090 "parser.cc"
    break;

  case 74: /* chunk_type: MYERROR  */
#line 713 "parser.y"
          {
    (yyval.integer) = SCTP_ERROR_CHUNK_TYPE;
}
#line 3098 "parser.cc"
    break;

  case 75: /* chunk_type: MYCOOKIE_ECHO  */
#line 716 "parser.y"
                {
    (yyval.integer) = SCTP_COOKIE_ECHO_CHUNK_TYPE;
}
#line 3106 "parser.cc"
    break;

  case 76: /* chunk_type: MYCOOKIE_ACK  */
#line 719 "parser.y"
               {
    (yyval.integer) = SCTP_COOKIE_ACK_CHUNK_TYPE;
}
#line 3114 "parser.cc"
    break;

  case 77: /* chunk_type: MYSHUTDOWN_COMPLETE  */
#line 722 "parser.y"
                     {
    (yyval.integer) = SCTP_SHUTDOWN_COMPLETE_CHUNK_TYPE;
}
#line 3122 "parser.cc"
    break;

  case 78: /* chunk_type: PAD  */
#line 725 "parser.y"
      {
    (yyval.integer) = SCTP_PAD_CHUNK_TYPE;
}
#line 3130 "parser.cc"
    break;

  case 79: /* chunk_type: RECONFIG  */
#line 728 "parser.y"
           {
    (yyval.integer) = SCTP_RECONFIG_CHUNK_TYPE;
}
#line 3138 "parser.cc"
    break;

  case 80: /* opt_data_flags: FLAGS '=' ELLIPSIS  */
#line 734 "parser.y"
                        { (yyval.integer) = -1; }
#line 3144 "parser.cc"
    break;

  case 81: /* opt_data_flags: FLAGS '=' HEX_INTEGER  */
#line 735 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3155 "parser.cc"
    break;

  case 82: /* opt_data_flags: FLAGS '=' INTEGER  */
#line 741 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3166 "parser.cc"
    break;

  case 83: /* opt_data_flags: FLAGS '=' MYWORD  */
#line 747 "parser.y"
                          {
    uint64_t flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'I':
            if (flags & SCTP_DATA_CHUNK_I_BIT) {
                semantic_error("I-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_I_BIT;
            }
            break;
        case 'U':
            if (flags & SCTP_DATA_CHUNK_U_BIT) {
                semantic_error("U-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_U_BIT;
            }
            break;
        case 'B':
            if (flags & SCTP_DATA_CHUNK_B_BIT) {
                semantic_error("B-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_B_BIT;
            }
            break;
        case 'E':
            if (flags & SCTP_DATA_CHUNK_E_BIT) {
                semantic_error("E-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_E_BIT;
            }
            break;
        default:
            semantic_error("Only expecting IUBE as flags");
        }
    }
    (yyval.integer) = flags;
}
#line 3212 "parser.cc"
    break;

  case 84: /* opt_abort_flags: FLAGS '=' ELLIPSIS  */
#line 791 "parser.y"
                        { (yyval.integer) = -1; }
#line 3218 "parser.cc"
    break;

  case 85: /* opt_abort_flags: FLAGS '=' HEX_INTEGER  */
#line 792 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3229 "parser.cc"
    break;

  case 86: /* opt_abort_flags: FLAGS '=' INTEGER  */
#line 798 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3240 "parser.cc"
    break;

  case 87: /* opt_abort_flags: FLAGS '=' MYWORD  */
#line 804 "parser.y"
                          {
    uint64_t flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_ABORT_CHUNK_T_BIT) {
                semantic_error("T-bit specified multiple times");
            } else {
                flags |= SCTP_ABORT_CHUNK_T_BIT;
            }
            break;
        default:
            semantic_error("Only expecting T as flags");
        }
    }
    (yyval.integer) = flags;
}
#line 3265 "parser.cc"
    break;

  case 88: /* opt_shutdown_complete_flags: FLAGS '=' ELLIPSIS  */
#line 827 "parser.y"
                        { (yyval.integer) = -1; }
#line 3271 "parser.cc"
    break;

  case 89: /* opt_shutdown_complete_flags: FLAGS '=' HEX_INTEGER  */
#line 828 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3282 "parser.cc"
    break;

  case 90: /* opt_shutdown_complete_flags: FLAGS '=' INTEGER  */
#line 834 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3293 "parser.cc"
    break;

  case 91: /* opt_shutdown_complete_flags: FLAGS '=' MYWORD  */
#line 840 "parser.y"
                          {
    uint64_t flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT) {
                semantic_error("T-bit specified multiple times");
            } else {
                flags |= SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT;
            }
            break;
        default:
            semantic_error("Only expecting T as flags");
        }
    }
    (yyval.integer) = flags;
}
#line 3318 "parser.cc"
    break;

  case 92: /* opt_tag: TAG '=' ELLIPSIS  */
#line 863 "parser.y"
                   { (yyval.integer) = -1; }
#line 3324 "parser.cc"
    break;

  case 93: /* opt_tag: TAG '=' INTEGER  */
#line 864 "parser.y"
                   {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("tag value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3335 "parser.cc"
    break;

  case 94: /* opt_a_rwnd: A_RWND '=' ELLIPSIS  */
#line 873 "parser.y"
                        { (yyval.integer) = -1; }
#line 3341 "parser.cc"
    break;

  case 95: /* opt_a_rwnd: A_RWND '=' INTEGER  */
#line 874 "parser.y"
                        {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("a_rwnd value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3352 "parser.cc"
    break;

  case 96: /* opt_os: OS '=' ELLIPSIS  */
#line 883 "parser.y"
                  { (yyval.integer) = -1; }
#line 3358 "parser.cc"
    break;

  case 97: /* opt_os: OS '=' INTEGER  */
#line 884 "parser.y"
                  {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("os value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3369 "parser.cc"
    break;

  case 98: /* opt_is: IS '=' ELLIPSIS  */
#line 893 "parser.y"
                  { (yyval.integer) = -1; }
#line 3375 "parser.cc"
    break;

  case 99: /* opt_is: IS '=' INTEGER  */
#line 894 "parser.y"
                  {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("is value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3386 "parser.cc"
    break;

  case 100: /* opt_tsn: TSN '=' ELLIPSIS  */
#line 903 "parser.y"
                   { (yyval.integer) = -1; }
#line 3392 "parser.cc"
    break;

  case 101: /* opt_tsn: TSN '=' INTEGER  */
#line 904 "parser.y"
                   {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("tsn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3403 "parser.cc"
    break;

  case 102: /* opt_sid: MYSID '=' ELLIPSIS  */
#line 913 "parser.y"
                     { (yyval.integer) = -1; }
#line 3409 "parser.cc"
    break;

  case 103: /* opt_sid: MYSID '=' INTEGER  */
#line 914 "parser.y"
                     {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3420 "parser.cc"
    break;

  case 104: /* opt_ssn: SSN '=' ELLIPSIS  */
#line 923 "parser.y"
                   { (yyval.integer) = -1; }
#line 3426 "parser.cc"
    break;

  case 105: /* opt_ssn: SSN '=' INTEGER  */
#line 924 "parser.y"
                   {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("ssn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3437 "parser.cc"
    break;

  case 106: /* opt_ppid: PPID '=' ELLIPSIS  */
#line 934 "parser.y"
                    { (yyval.integer) = -1; }
#line 3443 "parser.cc"
    break;

  case 107: /* opt_ppid: PPID '=' INTEGER  */
#line 935 "parser.y"
                    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("ppid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3454 "parser.cc"
    break;

  case 108: /* opt_ppid: PPID '=' HEX_INTEGER  */
#line 941 "parser.y"
                        {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("ppid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3465 "parser.cc"
    break;

  case 109: /* opt_cum_tsn: CUM_TSN '=' ELLIPSIS  */
#line 950 "parser.y"
                       { (yyval.integer) = -1; }
#line 3471 "parser.cc"
    break;

  case 110: /* opt_cum_tsn: CUM_TSN '=' INTEGER  */
#line 951 "parser.y"
                       {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("cum_tsn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3482 "parser.cc"
    break;

  case 111: /* opt_gaps: GAPS '=' ELLIPSIS  */
#line 960 "parser.y"
                            { (yyval.sack_block_list) = NULL; }
#line 3488 "parser.cc"
    break;

  case 112: /* opt_gaps: GAPS '=' '[' ELLIPSIS ']'  */
#line 961 "parser.y"
                            { (yyval.sack_block_list) = NULL; }
#line 3494 "parser.cc"
    break;

  case 113: /* opt_gaps: GAPS '=' '[' gap_list ']'  */
#line 962 "parser.y"
                            { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 3500 "parser.cc"
    break;

  case 114: /* opt_dups: DUPS '=' ELLIPSIS  */
#line 967 "parser.y"
                            { (yyval.sack_block_list) = NULL; }
#line 3506 "parser.cc"
    break;

  case 115: /* opt_dups: DUPS '=' '[' ELLIPSIS ']'  */
#line 968 "parser.y"
                            { (yyval.sack_block_list) = NULL; }
#line 3512 "parser.cc"
    break;

  case 116: /* opt_dups: DUPS '=' '[' dup_list ']'  */
#line 969 "parser.y"
                            { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 3518 "parser.cc"
    break;

  case 117: /* sctp_data_chunk_spec: MYDATA '[' opt_data_flags ',' opt_len ',' opt_tsn ',' opt_sid ',' opt_ssn ',' opt_ppid ']'  */
#line 974 "parser.y"
                                                                                             {
    if (((yyvsp[-9].integer) != -1) &&
        (!is_valid_u16((yyvsp[-9].integer)) || ((yyvsp[-9].integer) < SCTP_DATA_CHUNK_LENGTH))) {
        semantic_error("length value out of range");
    }
    (yyval.sctp_chunk) = PacketDrill::buildDataChunk((yyvsp[-11].integer), (yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 3530 "parser.cc"
    break;

  case 118: /* sctp_init_chunk_spec: MYINIT '[' opt_flags ',' opt_tag ',' opt_a_rwnd ',' opt_os ',' opt_is ',' opt_tsn opt_parameter_list ']'  */
#line 983 "parser.y"
                                                                                                           {
    (yyval.sctp_chunk) = PacketDrill::buildInitChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3538 "parser.cc"
    break;

  case 119: /* sctp_init_ack_chunk_spec: MYINIT_ACK '[' opt_flags ',' opt_tag ',' opt_a_rwnd ',' opt_os ',' opt_is ',' opt_tsn opt_parameter_list ']'  */
#line 988 "parser.y"
                                                                                                               {
    (yyval.sctp_chunk) = PacketDrill::buildInitAckChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3546 "parser.cc"
    break;

  case 120: /* sctp_sack_chunk_spec: MYSACK '[' opt_flags ',' opt_cum_tsn ',' opt_a_rwnd ',' opt_gaps ',' opt_dups ']'  */
#line 993 "parser.y"
                                                                                   {
    (yyval.sctp_chunk) = PacketDrill::buildSackChunk((yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].sack_block_list), (yyvsp[-1].sack_block_list));
}
#line 3554 "parser.cc"
    break;

  case 121: /* sctp_heartbeat_chunk_spec: MYHEARTBEAT '[' opt_flags ',' sctp_heartbeat_information_parameter ']'  */
#line 998 "parser.y"
                                                                         {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 3562 "parser.cc"
    break;

  case 122: /* sctp_heartbeat_ack_chunk_spec: MYHEARTBEAT_ACK '[' opt_flags ',' sctp_heartbeat_information_parameter ']'  */
#line 1004 "parser.y"
                                                                             {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatAckChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 3570 "parser.cc"
    break;

  case 123: /* sctp_abort_chunk_spec: MYABORT '[' opt_abort_flags ']'  */
#line 1010 "parser.y"
                                  {
    (yyval.sctp_chunk) = PacketDrill::buildAbortChunk((yyvsp[-1].integer));
}
#line 3578 "parser.cc"
    break;

  case 124: /* sctp_shutdown_chunk_spec: MYSHUTDOWN '[' opt_flags ',' opt_cum_tsn ']'  */
#line 1015 "parser.y"
                                               {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownChunk((yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 3586 "parser.cc"
    break;

  case 125: /* sctp_shutdown_ack_chunk_spec: MYSHUTDOWN_ACK '[' opt_flags ']'  */
#line 1020 "parser.y"
                                   {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownAckChunk((yyvsp[-1].integer));
}
#line 3594 "parser.cc"
    break;

  case 126: /* sctp_cookie_echo_chunk_spec: MYCOOKIE_ECHO '[' opt_flags ',' opt_len ',' opt_val ']'  */
#line 1025 "parser.y"
                                                          {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < SCTP_COOKIE_ACK_LENGTH))) {
        semantic_error("length value out of range");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != SCTP_COOKIE_ACK_LENGTH + (yyvsp[-1].byte_list)->getListLength())) {
        semantic_error("length value incompatible with val");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        semantic_error("length needs to be specified");
    }
    (yyval.sctp_chunk) = PacketDrill::buildCookieEchoChunk((yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 3613 "parser.cc"
    break;

  case 127: /* sctp_cookie_ack_chunk_spec: MYCOOKIE_ACK '[' opt_flags ']'  */
#line 1041 "parser.y"
                                 {
    (yyval.sctp_chunk) = PacketDrill::buildCookieAckChunk((yyvsp[-1].integer));
}
#line 3621 "parser.cc"
    break;

  case 128: /* opt_cause_list: ',' ELLIPSIS  */
#line 1046 "parser.y"
                           { (yyval.cause_list) = NULL; }
#line 3627 "parser.cc"
    break;

  case 129: /* opt_cause_list: %empty  */
#line 1047 "parser.y"
                           { (yyval.cause_list) = new cQueue("empty"); }
#line 3633 "parser.cc"
    break;

  case 130: /* opt_cause_list: ',' sctp_cause_list  */
#line 1048 "parser.y"
                      { (yyval.cause_list) = (yyvsp[0].cause_list); }
#line 3639 "parser.cc"
    break;

  case 131: /* sctp_cause_list: sctp_cause_spec  */
#line 1052 "parser.y"
                                           { (yyval.cause_list) = new cQueue("cause list");
                                             (yyval.cause_list)->insert((yyvsp[0].cause_item)); }
#line 3646 "parser.cc"
    break;

  case 132: /* sctp_cause_list: sctp_cause_list ',' sctp_cause_spec  */
#line 1054 "parser.y"
                                           { (yyval.cause_list) = (yyvsp[-2].cause_list);
                                             (yyval.cause_list)->insert((yyvsp[0].cause_item)); }
#line 3653 "parser.cc"
    break;

  case 133: /* sctp_invalid_stream_identifier_cause_spec: MYINVALID_STREAM_IDENTIFIER '[' MYSID '=' INTEGER ']'  */
#line 1059 "parser.y"
                                                        {
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("stream identifier out of range");
    }
    (yyval.cause_item) = new PacketDrillStruct(INVALID_STREAM_IDENTIFIER, (yyvsp[-1].integer));
}
#line 3664 "parser.cc"
    break;

  case 134: /* sctp_invalid_stream_identifier_cause_spec: MYINVALID_STREAM_IDENTIFIER '[' MYSID '=' ELLIPSIS ']'  */
#line 1065 "parser.y"
                                                         {
    (yyval.cause_item) = new PacketDrillStruct(INVALID_STREAM_IDENTIFIER, -1);
}
#line 3672 "parser.cc"
    break;

  case 135: /* sctp_cause_spec: sctp_invalid_stream_identifier_cause_spec  */
#line 1070 "parser.y"
                                                 { (yyval.cause_item) = (yyvsp[0].cause_item); }
#line 3678 "parser.cc"
    break;

  case 136: /* sctp_error_chunk_spec: MYERROR '[' opt_flags opt_cause_list ']'  */
#line 1074 "parser.y"
                                           {
    (yyval.sctp_chunk) = PacketDrill::buildErrorChunk((yyvsp[-2].integer), (yyvsp[-1].cause_list));
}
#line 3686 "parser.cc"
    break;

  case 137: /* sctp_shutdown_complete_chunk_spec: MYSHUTDOWN_COMPLETE '[' opt_shutdown_complete_flags ']'  */
#line 1079 "parser.y"
                                                          {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownCompleteChunk((yyvsp[-1].integer));
}
#line 3694 "parser.cc"
    break;

  case 138: /* opt_req_sn: REQ_SN '=' INTEGER  */
#line 1085 "parser.y"
                     {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("req_sn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3705 "parser.cc"
    break;

  case 139: /* opt_req_sn: REQ_SN '=' ELLIPSIS  */
#line 1091 "parser.y"
                      { (yyval.integer) = -1; }
#line 3711 "parser.cc"
    break;

  case 140: /* opt_resp_sn: RESP_SN '=' INTEGER  */
#line 1095 "parser.y"
                      {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("resp_sn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3722 "parser.cc"
    break;

  case 141: /* opt_resp_sn: RESP_SN '=' ELLIPSIS  */
#line 1101 "parser.y"
                       { (yyval.integer) = -1; }
#line 3728 "parser.cc"
    break;

  case 142: /* opt_last_tsn: LAST_TSN '=' INTEGER  */
#line 1105 "parser.y"
                       {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("last_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3739 "parser.cc"
    break;

  case 143: /* opt_last_tsn: LAST_TSN '=' ELLIPSIS  */
#line 1111 "parser.y"
                        { (yyval.integer) = -1; }
#line 3745 "parser.cc"
    break;

  case 144: /* opt_result: RESULT '=' INTEGER  */
#line 1115 "parser.y"
                     {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("result out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3756 "parser.cc"
    break;

  case 145: /* opt_result: RESULT '=' ELLIPSIS  */
#line 1121 "parser.y"
                      { (yyval.integer) = -1; }
#line 3762 "parser.cc"
    break;

  case 146: /* opt_sender_next_tsn: SENDER_NEXT_TSN '=' INTEGER  */
#line 1125 "parser.y"
                              {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("sender_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3773 "parser.cc"
    break;

  case 147: /* opt_sender_next_tsn: SENDER_NEXT_TSN '=' HEX_INTEGER  */
#line 1131 "parser.y"
                                  {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("sender_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3784 "parser.cc"
    break;

  case 148: /* opt_sender_next_tsn: SENDER_NEXT_TSN '=' ELLIPSIS  */
#line 1137 "parser.y"
                               { (yyval.integer) = -1; }
#line 3790 "parser.cc"
    break;

  case 149: /* opt_receiver_next_tsn: RECEIVER_NEXT_TSN '=' INTEGER  */
#line 1141 "parser.y"
                                {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("receiver_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3801 "parser.cc"
    break;

  case 150: /* opt_receiver_next_tsn: RECEIVER_NEXT_TSN '=' HEX_INTEGER  */
#line 1147 "parser.y"
                                    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("receiver_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3812 "parser.cc"
    break;

  case 151: /* opt_receiver_next_tsn: RECEIVER_NEXT_TSN '=' ELLIPSIS  */
#line 1153 "parser.y"
                                 { (yyval.integer) = -1; }
#line 3818 "parser.cc"
    break;

  case 152: /* opt_number_of_new_streams: NUMBER_OF_NEW_STREAMS '=' INTEGER  */
#line 1157 "parser.y"
                                    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("number_of_new_streams out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3829 "parser.cc"
    break;

  case 153: /* opt_number_of_new_streams: NUMBER_OF_NEW_STREAMS '=' ELLIPSIS  */
#line 1163 "parser.y"
                                     { (yyval.integer) = -1; }
#line 3835 "parser.cc"
    break;

  case 154: /* stream_list: stream  */
#line 1167 "parser.y"
         {
    (yyval.stream_list) = new cQueue("stream_list");
    (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 3844 "parser.cc"
    break;

  case 155: /* stream_list: stream_list ',' stream  */
#line 1171 "parser.y"
                         {
    (yyval.stream_list) = (yyvsp[-2].stream_list); (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 3852 "parser.cc"
    break;

  case 156: /* stream: %empty  */
#line 1177 "parser.y"
  {
    (yyval.expression) = new_integer_expression(-1, "%d");
}
#line 3860 "parser.cc"
    break;

  case 157: /* stream: INTEGER  */
#line 1180 "parser.y"
          {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("Stream number value out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 3871 "parser.cc"
    break;

  case 158: /* outgoing_ssn_reset_request: OUTGOING_SSN_RESET '[' opt_req_sn ',' opt_resp_sn ',' opt_last_tsn ']'  */
#line 1190 "parser.y"
                                                                         {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(OUTGOING_RESET_REQUEST_PARAMETER, 16, new PacketDrillStruct((yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer), -2, NULL));
}
#line 3879 "parser.cc"
    break;

  case 159: /* outgoing_ssn_reset_request: OUTGOING_SSN_RESET '[' opt_req_sn ',' opt_resp_sn ',' opt_last_tsn ',' SIDS '=' '[' stream_list ']' ']'  */
#line 1193 "parser.y"
                                                                                                          {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(OUTGOING_RESET_REQUEST_PARAMETER, 16, new PacketDrillStruct((yyvsp[-11].integer), (yyvsp[-9].integer), (yyvsp[-7].integer), -2, (yyvsp[-2].stream_list)));
}
#line 3887 "parser.cc"
    break;

  case 160: /* incoming_ssn_reset_request: INCOMING_SSN_RESET '[' opt_req_sn ']'  */
#line 1199 "parser.y"
                                        {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(INCOMING_RESET_REQUEST_PARAMETER, 8, new PacketDrillStruct((yyvsp[-1].integer), -2, -2, -2, NULL));
}
#line 3895 "parser.cc"
    break;

  case 161: /* incoming_ssn_reset_request: INCOMING_SSN_RESET '[' opt_req_sn ',' SIDS '=' '[' stream_list ']' ']'  */
#line 1202 "parser.y"
                                                                         {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(INCOMING_RESET_REQUEST_PARAMETER, 8, new PacketDrillStruct((yyvsp[-7].integer), -2, -2, -2, (yyvsp[-2].stream_list)));
}
#line 3903 "parser.cc"
    break;

  case 162: /* ssn_tsn_reset_request: SSN_TSN_RESET '[' opt_req_sn ']'  */
#line 1208 "parser.y"
                                   {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SSN_TSN_RESET_REQUEST_PARAMETER, 8, new PacketDrillStruct((yyvsp[-1].integer), -2, -2, -2, NULL));
}
#line 3911 "parser.cc"
    break;

  case 163: /* reconfig_response: RECONFIG_RESPONSE '[' opt_resp_sn ',' opt_result ']'  */
#line 1214 "parser.y"
                                                       {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STREAM_RESET_RESPONSE_PARAMETER, 8, new PacketDrillStruct((yyvsp[-3].integer), (yyvsp[-1].integer), -2, -2, NULL));
}
#line 3919 "parser.cc"
    break;

  case 164: /* reconfig_response: RECONFIG_RESPONSE '[' opt_resp_sn ',' opt_result ',' opt_sender_next_tsn ',' opt_receiver_next_tsn ']'  */
#line 1217 "parser.y"
                                                                                                        {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STREAM_RESET_RESPONSE_PARAMETER, 12, new PacketDrillStruct((yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer), NULL));
}
#line 3927 "parser.cc"
    break;

  case 165: /* add_outgoing_streams_request: ADD_OUTGOING_STREAMS '[' opt_req_sn ',' opt_number_of_new_streams ']'  */
#line 1223 "parser.y"
                                                                        {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(ADD_OUTGOING_STREAMS_REQUEST_PARAMETER, 12, new PacketDrillStruct((yyvsp[-3].integer), (yyvsp[-1].integer), -2, -2, NULL));
}
#line 3935 "parser.cc"
    break;

  case 166: /* add_incoming_streams_request: ADD_INCOMING_STREAMS '[' opt_req_sn ',' opt_number_of_new_streams ']'  */
#line 1229 "parser.y"
                                                                        {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(ADD_INCOMING_STREAMS_REQUEST_PARAMETER, 12, new PacketDrillStruct((yyvsp[-3].integer), (yyvsp[-1].integer), -2, -2, NULL));
}
#line 3943 "parser.cc"
    break;

  case 167: /* sctp_reconfig_chunk_spec: RECONFIG '[' opt_flags opt_parameter_list ']'  */
#line 1241 "parser.y"
                                                 {
    (yyval.sctp_chunk) = PacketDrill::buildReconfigChunk((yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3951 "parser.cc"
    break;

  case 168: /* opt_parameter_list: ',' ELLIPSIS  */
#line 1247 "parser.y"
                               { (yyval.expression_list) = NULL; }
#line 3957 "parser.cc"
    break;

  case 169: /* opt_parameter_list: %empty  */
#line 1248 "parser.y"
                               { (yyval.expression_list) = new cQueue("empty"); }
#line 3963 "parser.cc"
    break;

  case 170: /* opt_parameter_list: ',' sctp_parameter_list  */
#line 1249 "parser.y"
                          { (yyval.expression_list) = (yyvsp[0].expression_list); }
#line 3969 "parser.cc"
    break;

  case 171: /* sctp_parameter_list: sctp_parameter  */
#line 1253 "parser.y"
                 {
    (yyval.expression_list) = new cQueue("sctp_parameter_list");
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 3978 "parser.cc"
    break;

  case 172: /* sctp_parameter_list: sctp_parameter_list ',' sctp_parameter  */
#line 1257 "parser.y"
                                         {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 3987 "parser.cc"
    break;

  case 173: /* sctp_parameter: sctp_heartbeat_information_parameter  */
#line 1265 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 3993 "parser.cc"
    break;

  case 174: /* sctp_parameter: sctp_state_cookie_parameter  */
#line 1266 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 3999 "parser.cc"
    break;

  case 175: /* sctp_parameter: sctp_supported_extensions_parameter  */
#line 1267 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4005 "parser.cc"
    break;

  case 176: /* sctp_parameter: sctp_supported_address_types_parameter  */
#line 1268 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4011 "parser.cc"
    break;

  case 177: /* sctp_parameter: outgoing_ssn_reset_request  */
#line 1269 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4017 "parser.cc"
    break;

  case 178: /* sctp_parameter: incoming_ssn_reset_request  */
#line 1270 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4023 "parser.cc"
    break;

  case 179: /* sctp_parameter: ssn_tsn_reset_request  */
#line 1271 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4029 "parser.cc"
    break;

  case 180: /* sctp_parameter: reconfig_response  */
#line 1272 "parser.y"
                                         { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4035 "parser.cc"
    break;

  case 181: /* sctp_parameter: add_outgoing_streams_request  */
#line 1273 "parser.y"
                                              { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4041 "parser.cc"
    break;

  case 182: /* sctp_parameter: add_incoming_streams_request  */
#line 1274 "parser.y"
                                              { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4047 "parser.cc"
    break;

  case 183: /* sctp_heartbeat_information_parameter: HEARTBEAT_INFORMATION '[' ELLIPSIS ']'  */
#line 1279 "parser.y"
                                         {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(HEARTBEAT_INFORMATION, -1, NULL);
}
#line 4055 "parser.cc"
    break;

  case 184: /* sctp_heartbeat_information_parameter: HEARTBEAT_INFORMATION '[' opt_len ',' opt_val ']'  */
#line 1282 "parser.y"
                                                    {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < 4))) {
        semantic_error("length value out of range");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != 4 + (yyvsp[-1].byte_list)->getListLength())) {
        semantic_error("length value incompatible with val");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        semantic_error("length needs to be specified");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(HEARTBEAT_INFORMATION, (yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 4074 "parser.cc"
    break;

  case 185: /* sctp_supported_extensions_parameter: MYSUPPORTED_EXTENSIONS '[' TYPES '=' ELLIPSIS ']'  */
#line 1298 "parser.y"
                                                    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_EXTENSIONS, -1, NULL);
}
#line 4082 "parser.cc"
    break;

  case 186: /* sctp_supported_extensions_parameter: MYSUPPORTED_EXTENSIONS '[' TYPES '=' '[' chunk_types_list ']' ']'  */
#line 1301 "parser.y"
                                                                    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_EXTENSIONS, (yyvsp[-2].byte_list)->getListLength(), (yyvsp[-2].byte_list));
}
#line 4090 "parser.cc"
    break;

  case 187: /* address_types_list: %empty  */
#line 1306 "parser.y"
                                      { (yyval.stream_list) = new cQueue("empty_address_types_list");
}
#line 4097 "parser.cc"
    break;

  case 188: /* address_types_list: address_type  */
#line 1308 "parser.y"
                                      { (yyval.stream_list) = new cQueue("address_types_list");
                                        (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 4105 "parser.cc"
    break;

  case 189: /* address_types_list: address_types_list ',' address_type  */
#line 1311 "parser.y"
                                      { (yyval.stream_list) = (yyvsp[-2].stream_list);
                                        (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 4113 "parser.cc"
    break;

  case 190: /* address_type: INTEGER  */
#line 1317 "parser.y"
                { if (!is_valid_u16((yyvsp[0].integer))) {
                  semantic_error("address type value out of range");
                  }
                  (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u"); }
#line 4122 "parser.cc"
    break;

  case 191: /* address_type: IPV4_TYPE  */
#line 1321 "parser.y"
                { (yyval.expression) = new_integer_expression(SCTP_IPV4_ADDRESS_PARAMETER_TYPE, "%u"); }
#line 4128 "parser.cc"
    break;

  case 192: /* address_type: IPV6_TYPE  */
#line 1322 "parser.y"
                { (yyval.expression) = new_integer_expression(SCTP_IPV6_ADDRESS_PARAMETER_TYPE, "%u"); }
#line 4134 "parser.cc"
    break;

  case 193: /* sctp_supported_address_types_parameter: MYSUPPORTED_ADDRESS_TYPES '[' TYPES '=' ELLIPSIS ']'  */
#line 1326 "parser.y"
                                                       {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_ADDRESS_TYPES, -1, NULL);
}
#line 4142 "parser.cc"
    break;

  case 194: /* sctp_supported_address_types_parameter: MYSUPPORTED_ADDRESS_TYPES '[' TYPES '=' '[' address_types_list ']' ']'  */
#line 1329 "parser.y"
                                                                         {
(yyvsp[-2].stream_list)->setName("SupportedAddressTypes");
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_ADDRESS_TYPES, (yyvsp[-2].stream_list)->getLength(), (yyvsp[-2].stream_list));
}
#line 4151 "parser.cc"
    break;

  case 195: /* sctp_state_cookie_parameter: STATE_COOKIE '[' ELLIPSIS ']'  */
#line 1335 "parser.y"
                                {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, -1, NULL);
}
#line 4159 "parser.cc"
    break;

  case 196: /* sctp_state_cookie_parameter: STATE_COOKIE '[' LEN '=' ELLIPSIS ',' VAL '=' ELLIPSIS ']'  */
#line 1338 "parser.y"
                                                             {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, -1, NULL);
}
#line 4167 "parser.cc"
    break;

  case 197: /* sctp_state_cookie_parameter: STATE_COOKIE '[' LEN '=' INTEGER ',' VAL '=' ELLIPSIS ']'  */
#line 1341 "parser.y"
                                                            {
    if (((yyvsp[-5].integer) < 4) || !is_valid_u32((yyvsp[-5].integer))) {
        semantic_error("len value out of range");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, (yyvsp[-5].integer), NULL);
}
#line 4178 "parser.cc"
    break;

  case 198: /* packet_prefix: direction  */
#line 1351 "parser.y"
            {
    (yyval.packet) = new PacketDrillPacket();
    (yyval.packet)->setDirection((yyvsp[0].direction));
}
#line 4187 "parser.cc"
    break;

  case 199: /* direction: '<'  */
#line 1359 "parser.y"
      {
    (yyval.direction) = DIRECTION_INBOUND;
    current_script_line = yylineno;
}
#line 4196 "parser.cc"
    break;

  case 200: /* direction: '>'  */
#line 1363 "parser.y"
      {
    (yyval.direction) = DIRECTION_OUTBOUND;
    current_script_line = yylineno;
}
#line 4205 "parser.cc"
    break;

  case 201: /* flags: MYWORD  */
#line 1370 "parser.y"
         {
    (yyval.string) = (yyvsp[0].string);
}
#line 4213 "parser.cc"
    break;

  case 202: /* flags: '.'  */
#line 1373 "parser.y"
      {
    (yyval.string) = strdup(".");
}
#line 4221 "parser.cc"
    break;

  case 203: /* flags: MYWORD '.'  */
#line 1376 "parser.y"
             {
    asprintf(&((yyval.string)), "%s.", (yyvsp[-1].string));
    free((yyvsp[-1].string));
}
#line 4230 "parser.cc"
    break;

  case 204: /* flags: '-'  */
#line 1380 "parser.y"
      {
    (yyval.string) = strdup("");
}
#line 4238 "parser.cc"
    break;

  case 205: /* seq: INTEGER ':' INTEGER '(' INTEGER ')'  */
#line 1386 "parser.y"
                                      {
    if (!is_valid_u32((yyvsp[-5].integer))) {
        semantic_error("TCP start sequence number out of range");
    }
    if (!is_valid_u32((yyvsp[-3].integer))) {
        semantic_error("TCP end sequence number out of range");
    }
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("TCP payload size out of range");
    }
    if ((yyvsp[-3].integer) != ((yyvsp[-5].integer) +(yyvsp[-1].integer))) {
        semantic_error("inconsistent TCP sequence numbers and payload size");
    }
    (yyval.tcp_sequence_info).start_sequence = (yyvsp[-5].integer);
    (yyval.tcp_sequence_info).payload_bytes = (yyvsp[-1].integer);
    (yyval.tcp_sequence_info).protocol = IPPROTO_TCP;
}
#line 4260 "parser.cc"
    break;

  case 206: /* opt_ack: %empty  */
#line 1406 "parser.y"
  {
    (yyval.sequence_number) = 0;
}
#line 4268 "parser.cc"
    break;

  case 207: /* opt_ack: ACK INTEGER  */
#line 1409 "parser.y"
              {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("TCP ack sequence number out of range");
    }
    (yyval.sequence_number) = (yyvsp[0].integer);
}
#line 4279 "parser.cc"
    break;

  case 208: /* opt_window: %empty  */
#line 1418 "parser.y"
  {
    (yyval.window) = -1;
}
#line 4287 "parser.cc"
    break;

  case 209: /* opt_window: WIN INTEGER  */
#line 1421 "parser.y"
              {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("TCP window value out of range");
    }
    (yyval.window) = (yyvsp[0].integer);
}
#line 4298 "parser.cc"
    break;

  case 210: /* opt_tcp_options: %empty  */
#line 1430 "parser.y"
  {
    (yyval.tcp_options) = new cQueue("opt_tcp_options");
}
#line 4306 "parser.cc"
    break;

  case 211: /* opt_tcp_options: '<' tcp_option_list '>'  */
#line 1433 "parser.y"
                          {
    (yyval.tcp_options) = (yyvsp[-1].tcp_options);
}
#line 4314 "parser.cc"
    break;

  case 212: /* opt_tcp_options: '<' ELLIPSIS '>'  */
#line 1436 "parser.y"
                   {
    (yyval.tcp_options) = NULL; /* FLAG_OPTIONS_NOCHECK */
}
#line 4322 "parser.cc"
    break;

  case 213: /* tcp_option_list: tcp_option  */
#line 1443 "parser.y"
             {
    (yyval.tcp_options) = new cQueue("tcp_option");
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 4331 "parser.cc"
    break;

  case 214: /* tcp_option_list: tcp_option_list ',' tcp_option  */
#line 1447 "parser.y"
                                 {
    (yyval.tcp_options) = (yyvsp[-2].tcp_options);
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 4340 "parser.cc"
    break;

  case 215: /* tcp_option: NOP  */
#line 1455 "parser.y"
      {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_NOP, 1);
}
#line 4348 "parser.cc"
    break;

  case 216: /* tcp_option: EOL  */
#line 1458 "parser.y"
      {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_EOL, 1);
}
#line 4356 "parser.cc"
    break;

  case 217: /* tcp_option: MSS INTEGER  */
#line 1461 "parser.y"
              {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_MAXSEG, TCPOLEN_MAXSEG);
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("mss value out of range");
    }
    (yyval.tcp_option)->setMss((yyvsp[0].integer));
}
#line 4368 "parser.cc"
    break;

  case 218: /* tcp_option: WSCALE INTEGER  */
#line 1468 "parser.y"
                 {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_WINDOW, TCPOLEN_WINDOW);
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("window scale shift count out of range");
    }
    (yyval.tcp_option)->setWindowScale((yyvsp[0].integer));
}
#line 4380 "parser.cc"
    break;

  case 219: /* tcp_option: SACKOK  */
#line 1475 "parser.y"
         {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK_PERMITTED, TCPOLEN_SACK_PERMITTED);
}
#line 4388 "parser.cc"
    break;

  case 220: /* tcp_option: TCPSACK sack_block_list  */
#line 1478 "parser.y"
                          {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK, 2+8*(yyvsp[0].sack_block_list)->getLength());
    (yyval.tcp_option)->setBlockList((yyvsp[0].sack_block_list));
}
#line 4397 "parser.cc"
    break;

  case 221: /* tcp_option: TIMESTAMP VAL INTEGER ECR INTEGER  */
#line 1482 "parser.y"
                                    {
    uint32_t val, ecr;
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_TIMESTAMP, TCPOLEN_TIMESTAMP);
    if (!is_valid_u32((yyvsp[-2].integer))) {
        semantic_error("ts val out of range");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("ecr val out of range");
    }
    val = (yyvsp[-2].integer);
    ecr = (yyvsp[0].integer);
    (yyval.tcp_option)->setVal(val);
    (yyval.tcp_option)->setEcr(ecr);
}
#line 4416 "parser.cc"
    break;

  case 222: /* sack_block_list: sack_block  */
#line 1499 "parser.y"
             {
    (yyval.sack_block_list) = new cQueue("sack_block_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4425 "parser.cc"
    break;

  case 223: /* sack_block_list: sack_block_list sack_block  */
#line 1503 "parser.y"
                             {
    (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4433 "parser.cc"
    break;

  case 224: /* gap_list: %empty  */
#line 1509 "parser.y"
             { (yyval.sack_block_list) = new cQueue("gap_list");}
#line 4439 "parser.cc"
    break;

  case 225: /* gap_list: gap  */
#line 1510 "parser.y"
       {
    (yyval.sack_block_list) = new cQueue("gap_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4448 "parser.cc"
    break;

  case 226: /* gap_list: gap_list ',' gap  */
#line 1514 "parser.y"
                   {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4456 "parser.cc"
    break;

  case 227: /* gap: INTEGER ':' INTEGER  */
#line 1520 "parser.y"
                      {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        semantic_error("start value out of range");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("end value out of range");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 4470 "parser.cc"
    break;

  case 228: /* dup_list: %empty  */
#line 1532 "parser.y"
             { (yyval.sack_block_list) = new cQueue("dup_list");}
#line 4476 "parser.cc"
    break;

  case 229: /* dup_list: dup  */
#line 1533 "parser.y"
       {
    (yyval.sack_block_list) = new cQueue("dup_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4485 "parser.cc"
    break;

  case 230: /* dup_list: dup_list ',' dup  */
#line 1537 "parser.y"
                   {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4493 "parser.cc"
    break;

  case 231: /* dup: INTEGER ':' INTEGER  */
#line 1543 "parser.y"
                      {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        semantic_error("start value out of range");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("end value out of range");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 4507 "parser.cc"
    break;

  case 232: /* sack_block: INTEGER ':' INTEGER  */
#line 1555 "parser.y"
                      {
    if (!is_valid_u32((yyvsp[-2].integer))) {
        semantic_error("TCP SACK left sequence number out of range\n");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("TCP SACK right sequence number out of range");
    }
    PacketDrillStruct *block = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
    (yyval.sack_block) = block;
}
#line 4522 "parser.cc"
    break;

  case 233: /* syscall_spec: opt_end_time function_name function_arguments '=' expression opt_errno opt_note  */
#line 1568 "parser.y"
                                                                                  {
    (yyval.syscall) = (struct syscall_spec *)calloc(1, sizeof(struct syscall_spec));
    (yyval.syscall)->end_usecs = (yyvsp[-6].time_usecs);
    (yyval.syscall)->name = (yyvsp[-5].string);
    (yyval.syscall)->arguments = (yyvsp[-4].expression_list);
    (yyval.syscall)->result = (yyvsp[-2].expression);
    (yyval.syscall)->error = (yyvsp[-1].errno_info);
    (yyval.syscall)->note = (yyvsp[0].string);
}
#line 4536 "parser.cc"
    break;

  case 234: /* opt_end_time: %empty  */
#line 1580 "parser.y"
  {
    (yyval.time_usecs) = -1;
}
#line 4544 "parser.cc"
    break;

  case 235: /* opt_end_time: ELLIPSIS time  */
#line 1583 "parser.y"
                {
    (yyval.time_usecs) = (yyvsp[0].time_usecs);
}
#line 4552 "parser.cc"
    break;

  case 236: /* function_name: MYWORD  */
#line 1589 "parser.y"
         {
    (yyval.string) = (yyvsp[0].string);
    current_script_line = yylineno;
}
#line 4561 "parser.cc"
    break;

  case 237: /* function_arguments: '(' ')'  */
#line 1596 "parser.y"
          {
    (yyval.expression_list) = NULL;
}
#line 4569 "parser.cc"
    break;

  case 238: /* function_arguments: '(' expression_list ')'  */
#line 1599 "parser.y"
                          {
    (yyval.expression_list) = (yyvsp[-1].expression_list);
}
#line 4577 "parser.cc"
    break;

  case 239: /* expression_list: expression  */
#line 1605 "parser.y"
             {
    (yyval.expression_list) = new cQueue("new_expressionList");
    (yyval.expression_list)->insert((cObject*)(yyvsp[0].expression));
}
#line 4586 "parser.cc"
    break;

  case 240: /* expression_list: expression_list ',' expression  */
#line 1609 "parser.y"
                                 {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyval.expression_list)->insert((yyvsp[0].expression));
}
#line 4595 "parser.cc"
    break;

  case 241: /* expression: ELLIPSIS  */
#line 1616 "parser.y"
           {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 4603 "parser.cc"
    break;

  case 242: /* expression: decimal_integer  */
#line 1619 "parser.y"
                  {
    (yyval.expression) = (yyvsp[0].expression); }
#line 4610 "parser.cc"
    break;

  case 243: /* expression: hex_integer  */
#line 1621 "parser.y"
              {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4618 "parser.cc"
    break;

  case 244: /* expression: _HTONL_ '(' INTEGER ')'  */
#line 1624 "parser.y"
                          {
    if (!is_valid_u32((yyvsp[-1].integer))) {
        semantic_error("number out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%lu");
}
#line 4629 "parser.cc"
    break;

  case 245: /* expression: _HTONL_ '(' HEX_INTEGER ')'  */
#line 1630 "parser.y"
                              {
    if (!is_valid_u32((yyvsp[-1].integer))) {
        semantic_error("number out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%lu");
}
#line 4640 "parser.cc"
    break;

  case 246: /* expression: _HTONS_ '(' INTEGER ')'  */
#line 1636 "parser.y"
                          {
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("number out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%lu");
}
#line 4651 "parser.cc"
    break;

  case 247: /* expression: MYWORD  */
#line 1642 "parser.y"
         {
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 4660 "parser.cc"
    break;

  case 248: /* expression: MYSTRING  */
#line 1646 "parser.y"
           {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[0].string));
    (yyval.expression)->setFormat("\"%s\"");
}
#line 4670 "parser.cc"
    break;

  case 249: /* expression: MYSTRING ELLIPSIS  */
#line 1651 "parser.y"
                    {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[-1].string));
    (yyval.expression)->setFormat("\"%s\"...");
}
#line 4680 "parser.cc"
    break;

  case 250: /* expression: binary_expression  */
#line 1656 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4688 "parser.cc"
    break;

  case 251: /* expression: sockaddr  */
#line 1659 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4696 "parser.cc"
    break;

  case 252: /* expression: array  */
#line 1662 "parser.y"
        {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4704 "parser.cc"
    break;

  case 253: /* expression: sctp_initmsg  */
#line 1665 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4712 "parser.cc"
    break;

  case 254: /* expression: sctp_assoc_value  */
#line 1668 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4720 "parser.cc"
    break;

  case 255: /* expression: sctp_rtoinfo  */
#line 1671 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4728 "parser.cc"
    break;

  case 256: /* expression: sctp_sackinfo  */
#line 1674 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4736 "parser.cc"
    break;

  case 257: /* expression: sctp_status  */
#line 1677 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4744 "parser.cc"
    break;

  case 258: /* expression: sctp_paddrparams  */
#line 1680 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4752 "parser.cc"
    break;

  case 259: /* expression: sctp_assocparams  */
#line 1683 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4760 "parser.cc"
    break;

  case 260: /* expression: sctp_sndrcvinfo  */
#line 1686 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4768 "parser.cc"
    break;

  case 261: /* expression: sctp_reset_streams  */
#line 1689 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4776 "parser.cc"
    break;

  case 262: /* expression: sctp_add_streams  */
#line 1692 "parser.y"
                    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4784 "parser.cc"
    break;

  case 263: /* decimal_integer: INTEGER  */
#line 1700 "parser.y"
          {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%ld");
}
#line 4792 "parser.cc"
    break;

  case 264: /* hex_integer: HEX_INTEGER  */
#line 1706 "parser.y"
              {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%#lx");
}
#line 4800 "parser.cc"
    break;

  case 265: /* binary_expression: expression '|' expression  */
#line 1712 "parser.y"
                            {    /* bitwise OR */
    (yyval.expression) = new PacketDrillExpression(EXPR_BINARY);
    struct binary_expression *binary = (struct binary_expression *) malloc(sizeof(struct binary_expression));
    binary->op = strdup("|");
    binary->lhs = (yyvsp[-2].expression);
    binary->rhs = (yyvsp[0].expression);
    (yyval.expression)->setBinary(binary);
}
#line 4813 "parser.cc"
    break;

  case 266: /* array: '[' ']'  */
#line 1723 "parser.y"
          {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList(NULL);
}
#line 4822 "parser.cc"
    break;

  case 267: /* array: '[' expression_list ']'  */
#line 1727 "parser.y"
                          {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList((yyvsp[-1].expression_list));
}
#line 4831 "parser.cc"
    break;

  case 268: /* srto_initial: SRTO_INITIAL '=' INTEGER  */
#line 1734 "parser.y"
                           {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("srto_initial out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4842 "parser.cc"
    break;

  case 269: /* srto_initial: SRTO_INITIAL '=' ELLIPSIS  */
#line 1740 "parser.y"
                            {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 4850 "parser.cc"
    break;

  case 270: /* srto_max: SRTO_MAX '=' INTEGER  */
#line 1746 "parser.y"
                       {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4858 "parser.cc"
    break;

  case 271: /* srto_max: SRTO_MAX '=' ELLIPSIS  */
#line 1749 "parser.y"
                        { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4864 "parser.cc"
    break;

  case 272: /* srto_min: SRTO_MIN '=' INTEGER  */
#line 1753 "parser.y"
                       {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4872 "parser.cc"
    break;

  case 273: /* srto_min: SRTO_MIN '=' ELLIPSIS  */
#line 1756 "parser.y"
                        { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4878 "parser.cc"
    break;

  case 274: /* sctp_assoc_id: INTEGER  */
#line 1760 "parser.y"
          {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4886 "parser.cc"
    break;

  case 275: /* sctp_assoc_id: MYWORD  */
#line 1763 "parser.y"
         {
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 4895 "parser.cc"
    break;

  case 276: /* sctp_assoc_id: ELLIPSIS  */
#line 1767 "parser.y"
           { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4901 "parser.cc"
    break;

  case 277: /* sctp_rtoinfo: '{' SRTO_ASSOC_ID '=' sctp_assoc_id ',' srto_initial ',' srto_max ',' srto_min '}'  */
#line 1771 "parser.y"
                                                                                     {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RTOINFO);
    struct sctp_rtoinfo_expr *rtoinfo = (struct sctp_rtoinfo_expr *) malloc(sizeof(struct sctp_rtoinfo_expr));
    rtoinfo->srto_assoc_id = (yyvsp[-7].expression);
    rtoinfo->srto_initial = (yyvsp[-5].expression);
    rtoinfo->srto_max = (yyvsp[-3].expression);
    rtoinfo->srto_min = (yyvsp[-1].expression);
    (yyval.expression)->setRtoinfo(rtoinfo);
}
#line 4915 "parser.cc"
    break;

  case 278: /* sctp_rtoinfo: '{' srto_initial ',' srto_max ',' srto_min '}'  */
#line 1780 "parser.y"
                                                 {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RTOINFO);
    struct sctp_rtoinfo_expr *rtoinfo = (struct sctp_rtoinfo_expr *) malloc(sizeof(struct sctp_rtoinfo_expr));
    rtoinfo->srto_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    rtoinfo->srto_initial = (yyvsp[-5].expression);
    rtoinfo->srto_max = (yyvsp[-3].expression);
    rtoinfo->srto_min = (yyvsp[-1].expression);
    (yyval.expression)->setRtoinfo(rtoinfo);
}
#line 4929 "parser.cc"
    break;

  case 279: /* sasoc_asocmaxrxt: SASOC_ASOCMAXRXT '=' INTEGER  */
#line 1792 "parser.y"
                               {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sasoc_asocmaxrxt out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 4940 "parser.cc"
    break;

  case 280: /* sasoc_asocmaxrxt: SASOC_ASOCMAXRXT '=' ELLIPSIS  */
#line 1798 "parser.y"
                                { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4946 "parser.cc"
    break;

  case 281: /* sasoc_number_peer_destinations: SASOC_NUMBER_PEER_DESTINATIONS '=' INTEGER  */
#line 1802 "parser.y"
                                             {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sasoc_number_peer_destinations out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 4957 "parser.cc"
    break;

  case 282: /* sasoc_number_peer_destinations: SASOC_NUMBER_PEER_DESTINATIONS '=' ELLIPSIS  */
#line 1808 "parser.y"
                                              { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4963 "parser.cc"
    break;

  case 283: /* sasoc_peer_rwnd: SASOC_PEER_RWND '=' INTEGER  */
#line 1812 "parser.y"
                              {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sasoc_peer_rwnd out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4974 "parser.cc"
    break;

  case 284: /* sasoc_peer_rwnd: SASOC_PEER_RWND '=' ELLIPSIS  */
#line 1818 "parser.y"
                               { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4980 "parser.cc"
    break;

  case 285: /* sasoc_local_rwnd: SASOC_LOCAL_RWND '=' INTEGER  */
#line 1822 "parser.y"
                               {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sasoc_local_rwnd out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4991 "parser.cc"
    break;

  case 286: /* sasoc_local_rwnd: SASOC_LOCAL_RWND '=' ELLIPSIS  */
#line 1828 "parser.y"
                                { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4997 "parser.cc"
    break;

  case 287: /* sasoc_cookie_life: SASOC_COOKIE_LIFE '=' INTEGER  */
#line 1832 "parser.y"
                                {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sasoc_cookie_life out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5008 "parser.cc"
    break;

  case 288: /* sasoc_cookie_life: SASOC_COOKIE_LIFE '=' ELLIPSIS  */
#line 1838 "parser.y"
                                 { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5014 "parser.cc"
    break;

  case 289: /* sctp_assocparams: '{' SASOC_ASSOC_ID '=' sctp_assoc_id ',' sasoc_asocmaxrxt ',' sasoc_number_peer_destinations ',' sasoc_peer_rwnd ',' sasoc_local_rwnd ',' sasoc_cookie_life '}'  */
#line 1843 "parser.y"
                                                                     {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCPARAMS);
    struct sctp_assocparams_expr *assocparams = (struct sctp_assocparams_expr *) malloc(sizeof(struct sctp_assocparams_expr));
    assocparams->sasoc_assoc_id = (yyvsp[-11].expression);
    assocparams->sasoc_asocmaxrxt = (yyvsp[-9].expression);
    assocparams->sasoc_number_peer_destinations = (yyvsp[-7].expression);
    assocparams->sasoc_peer_rwnd = (yyvsp[-5].expression);
    assocparams->sasoc_local_rwnd = (yyvsp[-3].expression);
    assocparams->sasoc_cookie_life = (yyvsp[-1].expression);
    (yyval.expression)->setAssocParams(assocparams);
}
#line 5030 "parser.cc"
    break;

  case 290: /* sctp_assocparams: '{' sasoc_asocmaxrxt ',' sasoc_number_peer_destinations ',' sasoc_peer_rwnd ',' sasoc_local_rwnd ',' sasoc_cookie_life '}'  */
#line 1855 "parser.y"
                                                                     {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCPARAMS);
    struct sctp_assocparams_expr *assocparams = (struct sctp_assocparams_expr *) malloc(sizeof(struct sctp_assocparams_expr));
    assocparams->sasoc_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    assocparams->sasoc_asocmaxrxt = (yyvsp[-9].expression);
    assocparams->sasoc_number_peer_destinations = (yyvsp[-7].expression);
    assocparams->sasoc_peer_rwnd = (yyvsp[-5].expression);
    assocparams->sasoc_local_rwnd = (yyvsp[-3].expression);
    assocparams->sasoc_cookie_life = (yyvsp[-1].expression);
    (yyval.expression)->setAssocParams(assocparams);
}
#line 5046 "parser.cc"
    break;

  case 291: /* sinit_num_ostreams: SINIT_NUM_OSTREAMS '=' INTEGER  */
#line 1870 "parser.y"
                                 {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_num_ostreams out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5057 "parser.cc"
    break;

  case 292: /* sinit_num_ostreams: SINIT_NUM_OSTREAMS '=' ELLIPSIS  */
#line 1876 "parser.y"
                                  { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5063 "parser.cc"
    break;

  case 293: /* sinit_max_instreams: SINIT_MAX_INSTREAMS '=' INTEGER  */
#line 1880 "parser.y"
                                  {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_max_instreams out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5074 "parser.cc"
    break;

  case 294: /* sinit_max_instreams: SINIT_MAX_INSTREAMS '=' ELLIPSIS  */
#line 1886 "parser.y"
                                   { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5080 "parser.cc"
    break;

  case 295: /* sinit_max_attempts: SINIT_MAX_ATTEMPTS '=' INTEGER  */
#line 1890 "parser.y"
                                 {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_max_attempts out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5091 "parser.cc"
    break;

  case 296: /* sinit_max_attempts: SINIT_MAX_ATTEMPTS '=' ELLIPSIS  */
#line 1896 "parser.y"
                                  { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5097 "parser.cc"
    break;

  case 297: /* sinit_max_init_timeo: SINIT_MAX_INIT_TIMEO '=' INTEGER  */
#line 1900 "parser.y"
                                   {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_max_init_timeo out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5108 "parser.cc"
    break;

  case 298: /* sinit_max_init_timeo: SINIT_MAX_INIT_TIMEO '=' ELLIPSIS  */
#line 1906 "parser.y"
                                    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5114 "parser.cc"
    break;

  case 299: /* sctp_initmsg: '{' sinit_num_ostreams ',' sinit_max_instreams ',' sinit_max_attempts ',' sinit_max_init_timeo '}'  */
#line 1911 "parser.y"
{
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_INITMSG);
    struct sctp_initmsg_expr *initmsg = (struct sctp_initmsg_expr *) malloc(sizeof(struct sctp_initmsg_expr));
    initmsg->sinit_num_ostreams = (yyvsp[-7].expression);
    initmsg->sinit_max_instreams = (yyvsp[-5].expression);
    initmsg->sinit_max_attempts = (yyvsp[-3].expression);
    initmsg->sinit_max_init_timeo = (yyvsp[-1].expression);
    (yyval.expression)->setInitmsg(initmsg);
}
#line 5128 "parser.cc"
    break;

  case 300: /* sockaddr: '{' SA_FAMILY '=' MYWORD ',' SIN_PORT '=' _HTONS_ '(' INTEGER ')' ',' SIN_ADDR '=' INET_ADDR '(' MYSTRING ')' '}'  */
#line 1925 "parser.y"
                                                {
    if (strcmp((yyvsp[-15].string), "AF_INET") == 0) {
        (yyval.expression) = new PacketDrillExpression(EXPR_SOCKET_ADDRESS_IPV4);
        (yyval.expression)->setIp(new L3Address(Ipv4Address()));
    } else if (strcmp((yyvsp[-15].string), "AF_INET6") == 0) {
        (yyval.expression) = new PacketDrillExpression(EXPR_SOCKET_ADDRESS_IPV6);
        (yyval.expression)->setIp(new L3Address(Ipv6Address()));
    }
}
#line 5142 "parser.cc"
    break;

  case 301: /* spp_address: SPP_ADDRESS '=' ELLIPSIS  */
#line 1937 "parser.y"
                           { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5148 "parser.cc"
    break;

  case 302: /* spp_address: SPP_ADDRESS '=' sockaddr  */
#line 1938 "parser.y"
                           { (yyval.expression) = (yyvsp[0].expression); }
#line 5154 "parser.cc"
    break;

  case 303: /* spp_hbinterval: SPP_HBINTERVAL '=' INTEGER  */
#line 1942 "parser.y"
                             {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("spp_hbinterval out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5165 "parser.cc"
    break;

  case 304: /* spp_hbinterval: SPP_HBINTERVAL '=' ELLIPSIS  */
#line 1948 "parser.y"
                              { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5171 "parser.cc"
    break;

  case 305: /* spp_pathmtu: SPP_PATHMTU '=' INTEGER  */
#line 1952 "parser.y"
                          {
    if (!is_valid_u32((yyvsp[0].integer))) {
         semantic_error("spp_pathmtu out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5182 "parser.cc"
    break;

  case 306: /* spp_pathmtu: SPP_PATHMTU '=' ELLIPSIS  */
#line 1958 "parser.y"
                           { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5188 "parser.cc"
    break;

  case 307: /* spp_pathmaxrxt: SPP_PATHMAXRXT '=' INTEGER  */
#line 1962 "parser.y"
                             {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("spp_pathmaxrxt out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5199 "parser.cc"
    break;

  case 308: /* spp_pathmaxrxt: SPP_PATHMAXRXT '=' ELLIPSIS  */
#line 1968 "parser.y"
                              { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5205 "parser.cc"
    break;

  case 309: /* spp_flags: SPP_FLAGS '=' expression  */
#line 1972 "parser.y"
                           { (yyval.expression) = (yyvsp[0].expression); }
#line 5211 "parser.cc"
    break;

  case 310: /* spp_ipv6_flowlabel: SPP_IPV6_FLOWLABEL_ '=' INTEGER  */
#line 1976 "parser.y"
                                  {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("spp_ipv6_flowlabel out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5222 "parser.cc"
    break;

  case 311: /* spp_ipv6_flowlabel: SPP_IPV6_FLOWLABEL_ '=' ELLIPSIS  */
#line 1982 "parser.y"
                                   { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5228 "parser.cc"
    break;

  case 312: /* spp_dscp: SPP_DSCP_ '=' INTEGER  */
#line 1986 "parser.y"
                        {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("spp_dscp out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hhu");
}
#line 5239 "parser.cc"
    break;

  case 313: /* spp_dscp: SPP_DSCP_ '=' ELLIPSIS  */
#line 1992 "parser.y"
                         { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5245 "parser.cc"
    break;

  case 314: /* sctp_paddrparams: '{' SPP_ASSOC_ID '=' sctp_assoc_id ',' spp_address ',' spp_hbinterval ',' spp_pathmaxrxt ',' spp_pathmtu ',' spp_flags ',' spp_ipv6_flowlabel ',' spp_dscp '}'  */
#line 1997 "parser.y"
                                         {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_PEER_ADDR_PARAMS);
    struct sctp_paddrparams_expr *params = (struct sctp_paddrparams_expr *) malloc(sizeof(struct sctp_paddrparams_expr));
    params->spp_assoc_id = (yyvsp[-15].expression);
    params->spp_address = (yyvsp[-13].expression);
    params->spp_hbinterval = (yyvsp[-11].expression);
    params->spp_pathmaxrxt = (yyvsp[-9].expression);
    params->spp_pathmtu = (yyvsp[-7].expression);
    params->spp_flags = (yyvsp[-5].expression);
    params->spp_ipv6_flowlabel = (yyvsp[-3].expression);
    params->spp_dscp = (yyvsp[-1].expression);
    (yyval.expression)->setPaddrParams(params);
}
#line 5263 "parser.cc"
    break;

  case 315: /* sctp_paddrparams: '{' spp_address ',' spp_hbinterval ',' spp_pathmaxrxt ',' spp_pathmtu ',' spp_flags ',' spp_ipv6_flowlabel ',' spp_dscp '}'  */
#line 2011 "parser.y"
                                         {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_PEER_ADDR_PARAMS);
    struct sctp_paddrparams_expr *params = (struct sctp_paddrparams_expr *) malloc(sizeof(struct sctp_paddrparams_expr));
    params->spp_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    params->spp_address = (yyvsp[-13].expression);
    params->spp_hbinterval = (yyvsp[-11].expression);
    params->spp_pathmaxrxt = (yyvsp[-9].expression);
    params->spp_pathmtu = (yyvsp[-7].expression);
    params->spp_flags = (yyvsp[-5].expression);
    params->spp_ipv6_flowlabel = (yyvsp[-3].expression);
    params->spp_dscp = (yyvsp[-1].expression);
    (yyval.expression)->setPaddrParams(params);
}
#line 5281 "parser.cc"
    break;

  case 316: /* sstat_state: SSTAT_STATE '=' expression  */
#line 2027 "parser.y"
                             { (yyval.expression) = (yyvsp[0].expression); }
#line 5287 "parser.cc"
    break;

  case 317: /* sstat_rwnd: SSTAT_RWND '=' INTEGER  */
#line 2031 "parser.y"
                         {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sstat_rwnd out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5298 "parser.cc"
    break;

  case 318: /* sstat_rwnd: SSTAT_RWND '=' ELLIPSIS  */
#line 2037 "parser.y"
                          { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5304 "parser.cc"
    break;

  case 319: /* sstat_unackdata: SSTAT_UNACKDATA '=' INTEGER  */
#line 2041 "parser.y"
                              {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_unackdata out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5315 "parser.cc"
    break;

  case 320: /* sstat_unackdata: SSTAT_UNACKDATA '=' ELLIPSIS  */
#line 2047 "parser.y"
                               { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5321 "parser.cc"
    break;

  case 321: /* sstat_penddata: SSTAT_PENDDATA '=' INTEGER  */
#line 2051 "parser.y"
                             {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_penddata out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5332 "parser.cc"
    break;

  case 322: /* sstat_penddata: SSTAT_PENDDATA '=' ELLIPSIS  */
#line 2057 "parser.y"
                              { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5338 "parser.cc"
    break;

  case 323: /* sstat_instrms: SSTAT_INSTRMS '=' INTEGER  */
#line 2061 "parser.y"
                            {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_instrms out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5349 "parser.cc"
    break;

  case 324: /* sstat_instrms: SSTAT_INSTRMS '=' ELLIPSIS  */
#line 2067 "parser.y"
                             { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5355 "parser.cc"
    break;

  case 325: /* sstat_outstrms: SSTAT_OUTSTRMS '=' INTEGER  */
#line 2071 "parser.y"
                             {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_outstrms out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5366 "parser.cc"
    break;

  case 326: /* sstat_outstrms: SSTAT_OUTSTRMS '=' ELLIPSIS  */
#line 2077 "parser.y"
                              { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5372 "parser.cc"
    break;

  case 327: /* sstat_fragmentation_point: SSTAT_FRAGMENTATION_POINT '=' INTEGER  */
#line 2081 "parser.y"
                                        {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sstat_fragmentation_point out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5383 "parser.cc"
    break;

  case 328: /* sstat_fragmentation_point: SSTAT_FRAGMENTATION_POINT '=' ELLIPSIS  */
#line 2087 "parser.y"
                                         { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5389 "parser.cc"
    break;

  case 329: /* sstat_primary: SSTAT_PRIMARY '=' ELLIPSIS  */
#line 2091 "parser.y"
                             { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5395 "parser.cc"
    break;

  case 330: /* sctp_status: '{' SSTAT_ASSOC_ID '=' sctp_assoc_id ',' sstat_state ',' sstat_rwnd ',' sstat_unackdata ',' sstat_penddata ',' sstat_instrms ',' sstat_outstrms ',' sstat_fragmentation_point ',' sstat_primary '}'  */
#line 2097 "parser.y"
                                                    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_STATUS);
    struct sctp_status_expr *stat = (struct sctp_status_expr *) calloc(1, sizeof(struct sctp_status_expr));
    stat->sstat_assoc_id = (yyvsp[-17].expression);
    stat->sstat_state = (yyvsp[-15].expression);
    stat->sstat_rwnd = (yyvsp[-13].expression);
    stat->sstat_unackdata = (yyvsp[-11].expression);
    stat->sstat_penddata = (yyvsp[-9].expression);
    stat->sstat_instrms = (yyvsp[-7].expression);
    stat->sstat_outstrms = (yyvsp[-5].expression);
    stat->sstat_fragmentation_point = (yyvsp[-3].expression);
    stat->sstat_primary = (yyvsp[-1].expression);
    (yyval.expression)->setStatus(stat);
}
#line 5414 "parser.cc"
    break;

  case 331: /* sctp_status: '{' sstat_state ',' sstat_rwnd ',' sstat_unackdata ',' sstat_penddata ',' sstat_instrms ',' sstat_outstrms ',' sstat_fragmentation_point ',' sstat_primary '}'  */
#line 2112 "parser.y"
                                                    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_STATUS);
    struct sctp_status_expr *stat = (struct sctp_status_expr *) calloc(1, sizeof(struct sctp_status_expr));
    stat->sstat_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    stat->sstat_state = (yyvsp[-15].expression);
    stat->sstat_rwnd = (yyvsp[-13].expression);
    stat->sstat_unackdata = (yyvsp[-11].expression);
    stat->sstat_penddata = (yyvsp[-9].expression);
    stat->sstat_instrms = (yyvsp[-7].expression);
    stat->sstat_outstrms = (yyvsp[-5].expression);
    stat->sstat_fragmentation_point = (yyvsp[-3].expression);
    stat->sstat_primary = (yyvsp[-1].expression);
    (yyval.expression)->setStatus(stat);
}
#line 5433 "parser.cc"
    break;

  case 332: /* sinfo_stream: SINFO_STREAM '=' INTEGER  */
#line 2129 "parser.y"
                           {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinfo_stream out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5444 "parser.cc"
    break;

  case 333: /* sinfo_stream: SINFO_STREAM '=' ELLIPSIS  */
#line 2135 "parser.y"
                            { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5450 "parser.cc"
    break;

  case 334: /* sinfo_ssn: SINFO_SSN '=' INTEGER  */
#line 2139 "parser.y"
                        {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinfo_ssn out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5461 "parser.cc"
    break;

  case 335: /* sinfo_ssn: SINFO_SSN '=' ELLIPSIS  */
#line 2145 "parser.y"
                         { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5467 "parser.cc"
    break;

  case 336: /* sinfo_flags: SINFO_FLAGS '=' expression  */
#line 2149 "parser.y"
                             { (yyval.expression) = (yyvsp[0].expression); }
#line 5473 "parser.cc"
    break;

  case 337: /* sinfo_ppid: SINFO_PPID '=' _HTONL_ '(' INTEGER ')'  */
#line 2153 "parser.y"
                                         {
    if (!is_valid_u32((yyvsp[-1].integer))) {
        semantic_error("sinfo_ppid out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%u");
}
#line 5484 "parser.cc"
    break;

  case 338: /* sinfo_ppid: SINFO_PPID '=' ELLIPSIS  */
#line 2159 "parser.y"
                          { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5490 "parser.cc"
    break;

  case 339: /* sinfo_context: SINFO_CONTEXT '=' INTEGER  */
#line 2163 "parser.y"
                            {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_context out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5501 "parser.cc"
    break;

  case 340: /* sinfo_context: SINFO_CONTEXT '=' ELLIPSIS  */
#line 2169 "parser.y"
                             { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5507 "parser.cc"
    break;

  case 341: /* sinfo_timetolive: SINFO_TIMETOLIVE '=' INTEGER  */
#line 2173 "parser.y"
                               {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_timetolive out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5518 "parser.cc"
    break;

  case 342: /* sinfo_timetolive: SINFO_TIMETOLIVE '=' ELLIPSIS  */
#line 2179 "parser.y"
                                { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5524 "parser.cc"
    break;

  case 343: /* sinfo_tsn: SINFO_TSN '=' INTEGER  */
#line 2183 "parser.y"
                        {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_tsn out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5535 "parser.cc"
    break;

  case 344: /* sinfo_tsn: SINFO_TSN '=' ELLIPSIS  */
#line 2189 "parser.y"
                         { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5541 "parser.cc"
    break;

  case 345: /* sinfo_cumtsn: SINFO_CUMTSN '=' INTEGER  */
#line 2193 "parser.y"
                           {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_cumtsn out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5552 "parser.cc"
    break;

  case 346: /* sinfo_cumtsn: SINFO_CUMTSN '=' ELLIPSIS  */
#line 2199 "parser.y"
                            { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5558 "parser.cc"
    break;

  case 347: /* sctp_sndrcvinfo: '{' sinfo_stream ',' sinfo_ssn ',' sinfo_flags ',' sinfo_ppid ',' sinfo_context ',' sinfo_timetolive ',' sinfo_tsn ',' sinfo_cumtsn ',' SINFO_ASSOC_ID '=' sctp_assoc_id '}'  */
#line 2205 "parser.y"
                                                                          {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SNDRCVINFO);
    struct sctp_sndrcvinfo_expr *info = (struct sctp_sndrcvinfo_expr *) calloc(1, sizeof(struct sctp_sndrcvinfo_expr));
    info->sinfo_stream = (yyvsp[-19].expression);
    info->sinfo_ssn = (yyvsp[-17].expression);
    info->sinfo_flags = (yyvsp[-15].expression);
    info->sinfo_ppid = (yyvsp[-13].expression);
    info->sinfo_context = (yyvsp[-11].expression);
    info->sinfo_timetolive = (yyvsp[-9].expression);
    info->sinfo_tsn = (yyvsp[-7].expression);
    info->sinfo_cumtsn = (yyvsp[-5].expression);
    info->sinfo_assoc_id = (yyvsp[-1].expression);
    (yyval.expression)->setSndRcvInfo(info);
}
#line 5577 "parser.cc"
    break;

  case 348: /* sctp_sndrcvinfo: '{' sinfo_stream ',' sinfo_ssn ',' sinfo_flags ',' sinfo_ppid ',' sinfo_context ',' sinfo_timetolive ',' sinfo_tsn ',' sinfo_cumtsn '}'  */
#line 2220 "parser.y"
                                     {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SNDRCVINFO);
    struct sctp_sndrcvinfo_expr *info = (struct sctp_sndrcvinfo_expr *) malloc(sizeof(struct sctp_sndrcvinfo_expr));
    info->sinfo_stream = (yyvsp[-15].expression);
    info->sinfo_ssn = (yyvsp[-13].expression);
    info->sinfo_flags = (yyvsp[-11].expression);
    info->sinfo_ppid = (yyvsp[-9].expression);
    info->sinfo_context = (yyvsp[-7].expression);
    info->sinfo_timetolive = (yyvsp[-5].expression);
    info->sinfo_tsn = (yyvsp[-3].expression);
    info->sinfo_cumtsn = (yyvsp[-1].expression);
    info->sinfo_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    (yyval.expression)->setSndRcvInfo(info);
}
#line 5596 "parser.cc"
    break;

  case 349: /* srs_flags: SRS_FLAGS '=' INTEGER  */
#line 2236 "parser.y"
                        {
printf("SRS_FLAGS = INTEGER\n");
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("srs_flags out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5608 "parser.cc"
    break;

  case 350: /* srs_flags: SRS_FLAGS '=' MYWORD  */
#line 2243 "parser.y"
                       {
printf("SRS_FLAGS = MYWORD\n");
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 5618 "parser.cc"
    break;

  case 351: /* srs_flags: SRS_FLAGS '=' binary_expression  */
#line 2248 "parser.y"
                                  {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 5626 "parser.cc"
    break;

  case 352: /* sctp_reset_streams: '{' SRS_ASSOC_ID '=' sctp_assoc_id ',' srs_flags ',' SRS_NUMBER_STREAMS '=' INTEGER ',' SRS_STREAM_LIST '=' array '}'  */
#line 2254 "parser.y"
                                                                                                                        {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RESET_STREAMS);
    struct sctp_reset_streams_expr *rs = (struct sctp_reset_streams_expr *) malloc(sizeof(struct sctp_reset_streams_expr));
    rs->srs_assoc_id = (yyvsp[-11].expression);
    rs->srs_flags = (yyvsp[-9].expression);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("srs_number_streams out of range");
    }
    rs->srs_number_streams = new_integer_expression((yyvsp[-5].integer), "%hu");
    rs->srs_stream_list = (yyvsp[-1].expression);
    (yyval.expression)->setResetStreams(rs);
}
#line 5643 "parser.cc"
    break;

  case 353: /* sctp_reset_streams: '{' srs_flags ',' SRS_NUMBER_STREAMS '=' INTEGER ',' SRS_STREAM_LIST '=' array '}'  */
#line 2266 "parser.y"
                                                                                     {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RESET_STREAMS);
    struct sctp_reset_streams_expr *rs = (struct sctp_reset_streams_expr *) malloc(sizeof(struct sctp_reset_streams_expr));
    rs->srs_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    rs->srs_flags = (yyvsp[-9].expression);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("srs_number_streams out of range");
    }
    rs->srs_number_streams = new_integer_expression((yyvsp[-5].integer), "%hu");
    rs->srs_stream_list = (yyvsp[-1].expression);
    (yyval.expression)->setResetStreams(rs);
}
#line 5660 "parser.cc"
    break;

  case 354: /* sctp_add_streams: '{' SAS_ASSOC_ID '=' sctp_assoc_id ',' SAS_INSTRMS '=' INTEGER ',' SAS_OUTSTRMS '=' INTEGER '}'  */
#line 2281 "parser.y"
                                                                                                  {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ADD_STREAMS);
    struct sctp_add_streams_expr *rs = (struct sctp_add_streams_expr *) malloc(sizeof(struct sctp_add_streams_expr));
    rs->sas_assoc_id = (yyvsp[-9].expression);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("sas_instrms out of range");
    }
    rs->sas_instrms = new_integer_expression((yyvsp[-5].integer), "%hu");
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("sas_outstrms out of range");
    }
    rs->sas_outstrms = new_integer_expression((yyvsp[-1].integer), "%hu");
    (yyval.expression)->setAddStreams(rs);
}
#line 5679 "parser.cc"
    break;

  case 355: /* sctp_add_streams: '{' SAS_INSTRMS '=' INTEGER ',' SAS_OUTSTRMS '=' INTEGER '}'  */
#line 2295 "parser.y"
                                                               {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ADD_STREAMS);
    struct sctp_add_streams_expr *rs = (struct sctp_add_streams_expr *) malloc(sizeof(struct sctp_add_streams_expr));
    rs->sas_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("sas_instrms out of range");
    }
    rs->sas_instrms = new_integer_expression((yyvsp[-5].integer), "%hu");
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("sas_outstrms out of range");
    }
    rs->sas_outstrms = new_integer_expression((yyvsp[-1].integer), "%hu");
    (yyval.expression)->setAddStreams(rs);
}
#line 5698 "parser.cc"
    break;

  case 356: /* sctp_assoc_value: '{' ASSOC_ID '=' sctp_assoc_id ',' ASSOC_VALUE '=' expression '}'  */
#line 2313 "parser.y"
                                                                    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCVAL);
    struct sctp_assoc_value_expr *assocval = (struct sctp_assoc_value_expr *) malloc(sizeof(struct sctp_assoc_value_expr));
    assocval->assoc_id = (yyvsp[-5].expression);
    assocval->assoc_value = (yyvsp[-1].expression);
    (yyval.expression)->setAssocval(assocval);
}
#line 5710 "parser.cc"
    break;

  case 357: /* sctp_assoc_value: '{' ASSOC_VALUE '=' expression '}'  */
#line 2320 "parser.y"
                                     {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCVAL);
    struct sctp_assoc_value_expr *assocval = (struct sctp_assoc_value_expr *) malloc(sizeof(struct sctp_assoc_value_expr));
    assocval->assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    assocval->assoc_value = (yyvsp[-1].expression);
    (yyval.expression)->setAssocval(assocval);
}
#line 5722 "parser.cc"
    break;

  case 358: /* sack_delay: MYSACK_DELAY '=' INTEGER  */
#line 2330 "parser.y"
                           {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sack_delay out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5733 "parser.cc"
    break;

  case 359: /* sack_delay: MYSACK_DELAY '=' ELLIPSIS  */
#line 2336 "parser.y"
                            {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 5741 "parser.cc"
    break;

  case 360: /* sack_freq: SACK_FREQ '=' INTEGER  */
#line 2341 "parser.y"
                        {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sack_freq out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5752 "parser.cc"
    break;

  case 361: /* sack_freq: SACK_FREQ '=' ELLIPSIS  */
#line 2347 "parser.y"
                         { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5758 "parser.cc"
    break;

  case 362: /* sctp_sackinfo: '{' SACK_ASSOC_ID '=' sctp_assoc_id ',' sack_delay ',' sack_freq '}'  */
#line 2350 "parser.y"
                                                                       {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SACKINFO);
    struct sctp_sack_info_expr *sackinfo = (struct sctp_sack_info_expr *) malloc(sizeof(struct sctp_sack_info_expr));
    sackinfo->sack_assoc_id = (yyvsp[-5].expression);
    sackinfo->sack_delay = (yyvsp[-3].expression);
    sackinfo->sack_freq = (yyvsp[-1].expression);
    (yyval.expression)->setSackinfo(sackinfo);
}
#line 5771 "parser.cc"
    break;

  case 363: /* sctp_sackinfo: '{' sack_delay ',' sack_freq '}'  */
#line 2358 "parser.y"
                                   {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SACKINFO);
    struct sctp_sack_info_expr *sackinfo = (struct sctp_sack_info_expr *) malloc(sizeof(struct sctp_sack_info_expr));
    sackinfo->sack_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    sackinfo->sack_delay = (yyvsp[-3].expression);
    sackinfo->sack_freq = (yyvsp[-1].expression);
    (yyval.expression)->setSackinfo(sackinfo);
}
#line 5784 "parser.cc"
    break;

  case 364: /* opt_errno: %empty  */
#line 2369 "parser.y"
  {
    (yyval.errno_info) = NULL;
}
#line 5792 "parser.cc"
    break;

  case 365: /* opt_errno: MYWORD note  */
#line 2372 "parser.y"
              {
    (yyval.errno_info) = (struct errno_spec*)malloc(sizeof(struct errno_spec));
    (yyval.errno_info)->errno_macro = (yyvsp[-1].string);
    (yyval.errno_info)->strerror = (yyvsp[0].string);
}
#line 5802 "parser.cc"
    break;

  case 366: /* opt_note: %empty  */
#line 2380 "parser.y"
  {
    (yyval.string) = NULL;
}
#line 5810 "parser.cc"
    break;

  case 367: /* opt_note: note  */
#line 2383 "parser.y"
       {
    (yyval.string) = (yyvsp[0].string);
}
#line 5818 "parser.cc"
    break;

  case 368: /* note: '(' word_list ')'  */
#line 2389 "parser.y"
                    {
    (yyval.string) = (yyvsp[-1].string);
}
#line 5826 "parser.cc"
    break;

  case 369: /* word_list: MYWORD  */
#line 2395 "parser.y"
         {
    (yyval.string) = (yyvsp[0].string);
}
#line 5834 "parser.cc"
    break;

  case 370: /* word_list: word_list MYWORD  */
#line 2398 "parser.y"
                   {
    asprintf(&((yyval.string)), "%s %s", (yyvsp[-1].string), (yyvsp[0].string));
    free((yyvsp[-1].string));
    free((yyvsp[0].string));
}
#line 5844 "parser.cc"
    break;


#line 5848 "parser.cc"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;
#endif


/*-------------------------------------------------------.
| yyreturn -- parsing is finished, clean up and return.  |
`-------------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 2405 "parser.y"



