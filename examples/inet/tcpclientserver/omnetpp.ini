[Config NSClinux__NSClinux]
description = "NSC_TCP (Linux) <---> NSC_TCP (Linux)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"

[Config NSClinux__NSClinux_stream]
description = "NSC_TCP (Linux) <---> NSC_TCP (Linux)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"
**.app[*].dataTransferMode = "bytestream" # bytecount | object | bytestream

[Config NSClinux__NSCfreebsd]
description = "NSC_TCP (Linux) <---> NSC_TCP (FreeBSD)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"
**.client*.tcp.stackName = "libfreebsd5.3.so"

[Config NSCfreebsd__NSCfreebsd]
description = "NSC_TCP (FreeBSD) <---> NSC_TCP (FreeBSD)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"
**.tcp.stackName = "libfreebsd5.3.so"

[Config NSClwip__inet]
description = "NSC_TCP (lwIP) <---> inet_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "TcpNsc"
**.server*.tcp.stackName = "liblwip.so"
**.client*.tcp.typename = "Tcp"

[Config inet__NSClinux]
description = "inet_TCP <---> NSC_TCP (linux)"
# setting TCP stack implementation
**.server*.tcp.typename = "Tcp"
**.client*.tcp.typename = "TcpNsc"

[General]
network = ClientServer
total-stack = 7MiB
#abstract-config = true (requires omnet 6)

**.server.hasPcapRecorder = true
**.server.pcapRecorder.pcapFile = "results/server.pcap"
**.client1.hasPcapRecorder = true
**.client1.pcapRecorder.pcapFile = "results/client1.pcap"
**.crcMode = "computed"
**.pcapRecorder.pcapLinkType = 204     # Ppp

## tcp apps
**.numApps = 1
**.client*.app[*].typename = "TcpSessionApp"
**.client*.app[0].active = true
**.client*.app[0].localPort = -1
**.client*.app[0].connectAddress = "server"
**.client*.app[0].connectPort = 1000
**.client*.app[0].tOpen = 0.2s
**.client*.app[0].tSend = 0.4s
**.client*.app[0].sendBytes = 1000000B
**.client*.app[0].sendScript = ""
**.client*.app[0].tClose = 25s

**.server*.app[*].typename = "TcpEchoApp"
**.server*.app[0].localPort = 1000
**.server*.app[0].echoFactor = 2.0
**.server*.app[0].echoDelay = 0s

# NIC configuration
**.ppp[*].queue.typename = "DropTailQueue" # in routers
**.ppp[*].queue.packetCapacity = 10  # in routers

*.configurator.config=xml("<config><interface hosts='*' address='192.168.1.x' netmask='255.255.255.0'/></config>")

